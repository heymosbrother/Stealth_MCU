
Stealth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006668  08006668  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006670  08006670  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044f0  20000090  08006708  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004580  08006708  00024580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014798  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e7e  00000000  00000000  0003489b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00037720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbc  00000000  00000000  000388b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018063  00000000  00000000  00039674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e25  00000000  00000000  000516d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000963bb  00000000  00000000  000654fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cc8  00000000  00000000  000fb8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00100580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006584 	.word	0x08006584

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08006584 	.word	0x08006584

080001e0 <__aeabi_frsub>:
 80001e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__addsf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_fsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001ec <__addsf3>:
 80001ec:	0042      	lsls	r2, r0, #1
 80001ee:	bf1f      	itttt	ne
 80001f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001f4:	ea92 0f03 	teqne	r2, r3
 80001f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000200:	d06a      	beq.n	80002d8 <__addsf3+0xec>
 8000202:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000206:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800020a:	bfc1      	itttt	gt
 800020c:	18d2      	addgt	r2, r2, r3
 800020e:	4041      	eorgt	r1, r0
 8000210:	4048      	eorgt	r0, r1
 8000212:	4041      	eorgt	r1, r0
 8000214:	bfb8      	it	lt
 8000216:	425b      	neglt	r3, r3
 8000218:	2b19      	cmp	r3, #25
 800021a:	bf88      	it	hi
 800021c:	4770      	bxhi	lr
 800021e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000222:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000226:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800022a:	bf18      	it	ne
 800022c:	4240      	negne	r0, r0
 800022e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000232:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000236:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800023a:	bf18      	it	ne
 800023c:	4249      	negne	r1, r1
 800023e:	ea92 0f03 	teq	r2, r3
 8000242:	d03f      	beq.n	80002c4 <__addsf3+0xd8>
 8000244:	f1a2 0201 	sub.w	r2, r2, #1
 8000248:	fa41 fc03 	asr.w	ip, r1, r3
 800024c:	eb10 000c 	adds.w	r0, r0, ip
 8000250:	f1c3 0320 	rsb	r3, r3, #32
 8000254:	fa01 f103 	lsl.w	r1, r1, r3
 8000258:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800025c:	d502      	bpl.n	8000264 <__addsf3+0x78>
 800025e:	4249      	negs	r1, r1
 8000260:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000264:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000268:	d313      	bcc.n	8000292 <__addsf3+0xa6>
 800026a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026e:	d306      	bcc.n	800027e <__addsf3+0x92>
 8000270:	0840      	lsrs	r0, r0, #1
 8000272:	ea4f 0131 	mov.w	r1, r1, rrx
 8000276:	f102 0201 	add.w	r2, r2, #1
 800027a:	2afe      	cmp	r2, #254	; 0xfe
 800027c:	d251      	bcs.n	8000322 <__addsf3+0x136>
 800027e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000282:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000286:	bf08      	it	eq
 8000288:	f020 0001 	biceq.w	r0, r0, #1
 800028c:	ea40 0003 	orr.w	r0, r0, r3
 8000290:	4770      	bx	lr
 8000292:	0049      	lsls	r1, r1, #1
 8000294:	eb40 0000 	adc.w	r0, r0, r0
 8000298:	3a01      	subs	r2, #1
 800029a:	bf28      	it	cs
 800029c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002a0:	d2ed      	bcs.n	800027e <__addsf3+0x92>
 80002a2:	fab0 fc80 	clz	ip, r0
 80002a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002aa:	ebb2 020c 	subs.w	r2, r2, ip
 80002ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80002b2:	bfaa      	itet	ge
 80002b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b8:	4252      	neglt	r2, r2
 80002ba:	4318      	orrge	r0, r3
 80002bc:	bfbc      	itt	lt
 80002be:	40d0      	lsrlt	r0, r2
 80002c0:	4318      	orrlt	r0, r3
 80002c2:	4770      	bx	lr
 80002c4:	f092 0f00 	teq	r2, #0
 80002c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002cc:	bf06      	itte	eq
 80002ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002d2:	3201      	addeq	r2, #1
 80002d4:	3b01      	subne	r3, #1
 80002d6:	e7b5      	b.n	8000244 <__addsf3+0x58>
 80002d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002e0:	bf18      	it	ne
 80002e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e6:	d021      	beq.n	800032c <__addsf3+0x140>
 80002e8:	ea92 0f03 	teq	r2, r3
 80002ec:	d004      	beq.n	80002f8 <__addsf3+0x10c>
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	bf08      	it	eq
 80002f4:	4608      	moveq	r0, r1
 80002f6:	4770      	bx	lr
 80002f8:	ea90 0f01 	teq	r0, r1
 80002fc:	bf1c      	itt	ne
 80002fe:	2000      	movne	r0, #0
 8000300:	4770      	bxne	lr
 8000302:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000306:	d104      	bne.n	8000312 <__addsf3+0x126>
 8000308:	0040      	lsls	r0, r0, #1
 800030a:	bf28      	it	cs
 800030c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000310:	4770      	bx	lr
 8000312:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000316:	bf3c      	itt	cc
 8000318:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800031c:	4770      	bxcc	lr
 800031e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000322:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000326:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032a:	4770      	bx	lr
 800032c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000330:	bf16      	itet	ne
 8000332:	4608      	movne	r0, r1
 8000334:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000338:	4601      	movne	r1, r0
 800033a:	0242      	lsls	r2, r0, #9
 800033c:	bf06      	itte	eq
 800033e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000342:	ea90 0f01 	teqeq	r0, r1
 8000346:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800034a:	4770      	bx	lr

0800034c <__aeabi_ui2f>:
 800034c:	f04f 0300 	mov.w	r3, #0
 8000350:	e004      	b.n	800035c <__aeabi_i2f+0x8>
 8000352:	bf00      	nop

08000354 <__aeabi_i2f>:
 8000354:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000358:	bf48      	it	mi
 800035a:	4240      	negmi	r0, r0
 800035c:	ea5f 0c00 	movs.w	ip, r0
 8000360:	bf08      	it	eq
 8000362:	4770      	bxeq	lr
 8000364:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000368:	4601      	mov	r1, r0
 800036a:	f04f 0000 	mov.w	r0, #0
 800036e:	e01c      	b.n	80003aa <__aeabi_l2f+0x2a>

08000370 <__aeabi_ul2f>:
 8000370:	ea50 0201 	orrs.w	r2, r0, r1
 8000374:	bf08      	it	eq
 8000376:	4770      	bxeq	lr
 8000378:	f04f 0300 	mov.w	r3, #0
 800037c:	e00a      	b.n	8000394 <__aeabi_l2f+0x14>
 800037e:	bf00      	nop

08000380 <__aeabi_l2f>:
 8000380:	ea50 0201 	orrs.w	r2, r0, r1
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800038c:	d502      	bpl.n	8000394 <__aeabi_l2f+0x14>
 800038e:	4240      	negs	r0, r0
 8000390:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000394:	ea5f 0c01 	movs.w	ip, r1
 8000398:	bf02      	ittt	eq
 800039a:	4684      	moveq	ip, r0
 800039c:	4601      	moveq	r1, r0
 800039e:	2000      	moveq	r0, #0
 80003a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003a4:	bf08      	it	eq
 80003a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003ae:	fabc f28c 	clz	r2, ip
 80003b2:	3a08      	subs	r2, #8
 80003b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b8:	db10      	blt.n	80003dc <__aeabi_l2f+0x5c>
 80003ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80003be:	4463      	add	r3, ip
 80003c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003c4:	f1c2 0220 	rsb	r2, r2, #32
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	fa20 f202 	lsr.w	r2, r0, r2
 80003d0:	eb43 0002 	adc.w	r0, r3, r2
 80003d4:	bf08      	it	eq
 80003d6:	f020 0001 	biceq.w	r0, r0, #1
 80003da:	4770      	bx	lr
 80003dc:	f102 0220 	add.w	r2, r2, #32
 80003e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e4:	f1c2 0220 	rsb	r2, r2, #32
 80003e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003ec:	fa21 f202 	lsr.w	r2, r1, r2
 80003f0:	eb43 0002 	adc.w	r0, r3, r2
 80003f4:	bf08      	it	eq
 80003f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003fa:	4770      	bx	lr

080003fc <__aeabi_ldivmod>:
 80003fc:	b97b      	cbnz	r3, 800041e <__aeabi_ldivmod+0x22>
 80003fe:	b972      	cbnz	r2, 800041e <__aeabi_ldivmod+0x22>
 8000400:	2900      	cmp	r1, #0
 8000402:	bfbe      	ittt	lt
 8000404:	2000      	movlt	r0, #0
 8000406:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800040a:	e006      	blt.n	800041a <__aeabi_ldivmod+0x1e>
 800040c:	bf08      	it	eq
 800040e:	2800      	cmpeq	r0, #0
 8000410:	bf1c      	itt	ne
 8000412:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000416:	f04f 30ff 	movne.w	r0, #4294967295
 800041a:	f000 b9bb 	b.w	8000794 <__aeabi_idiv0>
 800041e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000422:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000426:	2900      	cmp	r1, #0
 8000428:	db09      	blt.n	800043e <__aeabi_ldivmod+0x42>
 800042a:	2b00      	cmp	r3, #0
 800042c:	db1a      	blt.n	8000464 <__aeabi_ldivmod+0x68>
 800042e:	f000 f84d 	bl	80004cc <__udivmoddi4>
 8000432:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043a:	b004      	add	sp, #16
 800043c:	4770      	bx	lr
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	2b00      	cmp	r3, #0
 8000446:	db1b      	blt.n	8000480 <__aeabi_ldivmod+0x84>
 8000448:	f000 f840 	bl	80004cc <__udivmoddi4>
 800044c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000454:	b004      	add	sp, #16
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	4252      	negs	r2, r2
 800045e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000462:	4770      	bx	lr
 8000464:	4252      	negs	r2, r2
 8000466:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800046a:	f000 f82f 	bl	80004cc <__udivmoddi4>
 800046e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000476:	b004      	add	sp, #16
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	4770      	bx	lr
 8000480:	4252      	negs	r2, r2
 8000482:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000486:	f000 f821 	bl	80004cc <__udivmoddi4>
 800048a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800048e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000492:	b004      	add	sp, #16
 8000494:	4252      	negs	r2, r2
 8000496:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800049a:	4770      	bx	lr

0800049c <__aeabi_uldivmod>:
 800049c:	b953      	cbnz	r3, 80004b4 <__aeabi_uldivmod+0x18>
 800049e:	b94a      	cbnz	r2, 80004b4 <__aeabi_uldivmod+0x18>
 80004a0:	2900      	cmp	r1, #0
 80004a2:	bf08      	it	eq
 80004a4:	2800      	cmpeq	r0, #0
 80004a6:	bf1c      	itt	ne
 80004a8:	f04f 31ff 	movne.w	r1, #4294967295
 80004ac:	f04f 30ff 	movne.w	r0, #4294967295
 80004b0:	f000 b970 	b.w	8000794 <__aeabi_idiv0>
 80004b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80004b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004bc:	f000 f806 	bl	80004cc <__udivmoddi4>
 80004c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004c8:	b004      	add	sp, #16
 80004ca:	4770      	bx	lr

080004cc <__udivmoddi4>:
 80004cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004d0:	9e08      	ldr	r6, [sp, #32]
 80004d2:	460d      	mov	r5, r1
 80004d4:	4604      	mov	r4, r0
 80004d6:	460f      	mov	r7, r1
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d14a      	bne.n	8000572 <__udivmoddi4+0xa6>
 80004dc:	428a      	cmp	r2, r1
 80004de:	4694      	mov	ip, r2
 80004e0:	d965      	bls.n	80005ae <__udivmoddi4+0xe2>
 80004e2:	fab2 f382 	clz	r3, r2
 80004e6:	b143      	cbz	r3, 80004fa <__udivmoddi4+0x2e>
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	f1c3 0220 	rsb	r2, r3, #32
 80004f0:	409f      	lsls	r7, r3
 80004f2:	fa20 f202 	lsr.w	r2, r0, r2
 80004f6:	4317      	orrs	r7, r2
 80004f8:	409c      	lsls	r4, r3
 80004fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fe:	fa1f f58c 	uxth.w	r5, ip
 8000502:	fbb7 f1fe 	udiv	r1, r7, lr
 8000506:	0c22      	lsrs	r2, r4, #16
 8000508:	fb0e 7711 	mls	r7, lr, r1, r7
 800050c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000510:	fb01 f005 	mul.w	r0, r1, r5
 8000514:	4290      	cmp	r0, r2
 8000516:	d90a      	bls.n	800052e <__udivmoddi4+0x62>
 8000518:	eb1c 0202 	adds.w	r2, ip, r2
 800051c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000520:	f080 811c 	bcs.w	800075c <__udivmoddi4+0x290>
 8000524:	4290      	cmp	r0, r2
 8000526:	f240 8119 	bls.w	800075c <__udivmoddi4+0x290>
 800052a:	3902      	subs	r1, #2
 800052c:	4462      	add	r2, ip
 800052e:	1a12      	subs	r2, r2, r0
 8000530:	b2a4      	uxth	r4, r4
 8000532:	fbb2 f0fe 	udiv	r0, r2, lr
 8000536:	fb0e 2210 	mls	r2, lr, r0, r2
 800053a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800053e:	fb00 f505 	mul.w	r5, r0, r5
 8000542:	42a5      	cmp	r5, r4
 8000544:	d90a      	bls.n	800055c <__udivmoddi4+0x90>
 8000546:	eb1c 0404 	adds.w	r4, ip, r4
 800054a:	f100 32ff 	add.w	r2, r0, #4294967295
 800054e:	f080 8107 	bcs.w	8000760 <__udivmoddi4+0x294>
 8000552:	42a5      	cmp	r5, r4
 8000554:	f240 8104 	bls.w	8000760 <__udivmoddi4+0x294>
 8000558:	4464      	add	r4, ip
 800055a:	3802      	subs	r0, #2
 800055c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	2100      	movs	r1, #0
 8000564:	b11e      	cbz	r6, 800056e <__udivmoddi4+0xa2>
 8000566:	40dc      	lsrs	r4, r3
 8000568:	2300      	movs	r3, #0
 800056a:	e9c6 4300 	strd	r4, r3, [r6]
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	428b      	cmp	r3, r1
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0xbc>
 8000576:	2e00      	cmp	r6, #0
 8000578:	f000 80ed 	beq.w	8000756 <__udivmoddi4+0x28a>
 800057c:	2100      	movs	r1, #0
 800057e:	e9c6 0500 	strd	r0, r5, [r6]
 8000582:	4608      	mov	r0, r1
 8000584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000588:	fab3 f183 	clz	r1, r3
 800058c:	2900      	cmp	r1, #0
 800058e:	d149      	bne.n	8000624 <__udivmoddi4+0x158>
 8000590:	42ab      	cmp	r3, r5
 8000592:	d302      	bcc.n	800059a <__udivmoddi4+0xce>
 8000594:	4282      	cmp	r2, r0
 8000596:	f200 80f8 	bhi.w	800078a <__udivmoddi4+0x2be>
 800059a:	1a84      	subs	r4, r0, r2
 800059c:	eb65 0203 	sbc.w	r2, r5, r3
 80005a0:	2001      	movs	r0, #1
 80005a2:	4617      	mov	r7, r2
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d0e2      	beq.n	800056e <__udivmoddi4+0xa2>
 80005a8:	e9c6 4700 	strd	r4, r7, [r6]
 80005ac:	e7df      	b.n	800056e <__udivmoddi4+0xa2>
 80005ae:	b902      	cbnz	r2, 80005b2 <__udivmoddi4+0xe6>
 80005b0:	deff      	udf	#255	; 0xff
 80005b2:	fab2 f382 	clz	r3, r2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f040 8090 	bne.w	80006dc <__udivmoddi4+0x210>
 80005bc:	1a8a      	subs	r2, r1, r2
 80005be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005c2:	fa1f fe8c 	uxth.w	lr, ip
 80005c6:	2101      	movs	r1, #1
 80005c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80005cc:	fb07 2015 	mls	r0, r7, r5, r2
 80005d0:	0c22      	lsrs	r2, r4, #16
 80005d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80005d6:	fb0e f005 	mul.w	r0, lr, r5
 80005da:	4290      	cmp	r0, r2
 80005dc:	d908      	bls.n	80005f0 <__udivmoddi4+0x124>
 80005de:	eb1c 0202 	adds.w	r2, ip, r2
 80005e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80005e6:	d202      	bcs.n	80005ee <__udivmoddi4+0x122>
 80005e8:	4290      	cmp	r0, r2
 80005ea:	f200 80cb 	bhi.w	8000784 <__udivmoddi4+0x2b8>
 80005ee:	4645      	mov	r5, r8
 80005f0:	1a12      	subs	r2, r2, r0
 80005f2:	b2a4      	uxth	r4, r4
 80005f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80005f8:	fb07 2210 	mls	r2, r7, r0, r2
 80005fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000600:	fb0e fe00 	mul.w	lr, lr, r0
 8000604:	45a6      	cmp	lr, r4
 8000606:	d908      	bls.n	800061a <__udivmoddi4+0x14e>
 8000608:	eb1c 0404 	adds.w	r4, ip, r4
 800060c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000610:	d202      	bcs.n	8000618 <__udivmoddi4+0x14c>
 8000612:	45a6      	cmp	lr, r4
 8000614:	f200 80bb 	bhi.w	800078e <__udivmoddi4+0x2c2>
 8000618:	4610      	mov	r0, r2
 800061a:	eba4 040e 	sub.w	r4, r4, lr
 800061e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000622:	e79f      	b.n	8000564 <__udivmoddi4+0x98>
 8000624:	f1c1 0720 	rsb	r7, r1, #32
 8000628:	408b      	lsls	r3, r1
 800062a:	fa22 fc07 	lsr.w	ip, r2, r7
 800062e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000632:	fa05 f401 	lsl.w	r4, r5, r1
 8000636:	fa20 f307 	lsr.w	r3, r0, r7
 800063a:	40fd      	lsrs	r5, r7
 800063c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000640:	4323      	orrs	r3, r4
 8000642:	fbb5 f8f9 	udiv	r8, r5, r9
 8000646:	fa1f fe8c 	uxth.w	lr, ip
 800064a:	fb09 5518 	mls	r5, r9, r8, r5
 800064e:	0c1c      	lsrs	r4, r3, #16
 8000650:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000654:	fb08 f50e 	mul.w	r5, r8, lr
 8000658:	42a5      	cmp	r5, r4
 800065a:	fa02 f201 	lsl.w	r2, r2, r1
 800065e:	fa00 f001 	lsl.w	r0, r0, r1
 8000662:	d90b      	bls.n	800067c <__udivmoddi4+0x1b0>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f108 3aff 	add.w	sl, r8, #4294967295
 800066c:	f080 8088 	bcs.w	8000780 <__udivmoddi4+0x2b4>
 8000670:	42a5      	cmp	r5, r4
 8000672:	f240 8085 	bls.w	8000780 <__udivmoddi4+0x2b4>
 8000676:	f1a8 0802 	sub.w	r8, r8, #2
 800067a:	4464      	add	r4, ip
 800067c:	1b64      	subs	r4, r4, r5
 800067e:	b29d      	uxth	r5, r3
 8000680:	fbb4 f3f9 	udiv	r3, r4, r9
 8000684:	fb09 4413 	mls	r4, r9, r3, r4
 8000688:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800068c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000690:	45a6      	cmp	lr, r4
 8000692:	d908      	bls.n	80006a6 <__udivmoddi4+0x1da>
 8000694:	eb1c 0404 	adds.w	r4, ip, r4
 8000698:	f103 35ff 	add.w	r5, r3, #4294967295
 800069c:	d26c      	bcs.n	8000778 <__udivmoddi4+0x2ac>
 800069e:	45a6      	cmp	lr, r4
 80006a0:	d96a      	bls.n	8000778 <__udivmoddi4+0x2ac>
 80006a2:	3b02      	subs	r3, #2
 80006a4:	4464      	add	r4, ip
 80006a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006aa:	fba3 9502 	umull	r9, r5, r3, r2
 80006ae:	eba4 040e 	sub.w	r4, r4, lr
 80006b2:	42ac      	cmp	r4, r5
 80006b4:	46c8      	mov	r8, r9
 80006b6:	46ae      	mov	lr, r5
 80006b8:	d356      	bcc.n	8000768 <__udivmoddi4+0x29c>
 80006ba:	d053      	beq.n	8000764 <__udivmoddi4+0x298>
 80006bc:	b156      	cbz	r6, 80006d4 <__udivmoddi4+0x208>
 80006be:	ebb0 0208 	subs.w	r2, r0, r8
 80006c2:	eb64 040e 	sbc.w	r4, r4, lr
 80006c6:	fa04 f707 	lsl.w	r7, r4, r7
 80006ca:	40ca      	lsrs	r2, r1
 80006cc:	40cc      	lsrs	r4, r1
 80006ce:	4317      	orrs	r7, r2
 80006d0:	e9c6 7400 	strd	r7, r4, [r6]
 80006d4:	4618      	mov	r0, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006dc:	f1c3 0120 	rsb	r1, r3, #32
 80006e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80006e4:	fa20 f201 	lsr.w	r2, r0, r1
 80006e8:	fa25 f101 	lsr.w	r1, r5, r1
 80006ec:	409d      	lsls	r5, r3
 80006ee:	432a      	orrs	r2, r5
 80006f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006f4:	fa1f fe8c 	uxth.w	lr, ip
 80006f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80006fc:	fb07 1510 	mls	r5, r7, r0, r1
 8000700:	0c11      	lsrs	r1, r2, #16
 8000702:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000706:	fb00 f50e 	mul.w	r5, r0, lr
 800070a:	428d      	cmp	r5, r1
 800070c:	fa04 f403 	lsl.w	r4, r4, r3
 8000710:	d908      	bls.n	8000724 <__udivmoddi4+0x258>
 8000712:	eb1c 0101 	adds.w	r1, ip, r1
 8000716:	f100 38ff 	add.w	r8, r0, #4294967295
 800071a:	d22f      	bcs.n	800077c <__udivmoddi4+0x2b0>
 800071c:	428d      	cmp	r5, r1
 800071e:	d92d      	bls.n	800077c <__udivmoddi4+0x2b0>
 8000720:	3802      	subs	r0, #2
 8000722:	4461      	add	r1, ip
 8000724:	1b49      	subs	r1, r1, r5
 8000726:	b292      	uxth	r2, r2
 8000728:	fbb1 f5f7 	udiv	r5, r1, r7
 800072c:	fb07 1115 	mls	r1, r7, r5, r1
 8000730:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000734:	fb05 f10e 	mul.w	r1, r5, lr
 8000738:	4291      	cmp	r1, r2
 800073a:	d908      	bls.n	800074e <__udivmoddi4+0x282>
 800073c:	eb1c 0202 	adds.w	r2, ip, r2
 8000740:	f105 38ff 	add.w	r8, r5, #4294967295
 8000744:	d216      	bcs.n	8000774 <__udivmoddi4+0x2a8>
 8000746:	4291      	cmp	r1, r2
 8000748:	d914      	bls.n	8000774 <__udivmoddi4+0x2a8>
 800074a:	3d02      	subs	r5, #2
 800074c:	4462      	add	r2, ip
 800074e:	1a52      	subs	r2, r2, r1
 8000750:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000754:	e738      	b.n	80005c8 <__udivmoddi4+0xfc>
 8000756:	4631      	mov	r1, r6
 8000758:	4630      	mov	r0, r6
 800075a:	e708      	b.n	800056e <__udivmoddi4+0xa2>
 800075c:	4639      	mov	r1, r7
 800075e:	e6e6      	b.n	800052e <__udivmoddi4+0x62>
 8000760:	4610      	mov	r0, r2
 8000762:	e6fb      	b.n	800055c <__udivmoddi4+0x90>
 8000764:	4548      	cmp	r0, r9
 8000766:	d2a9      	bcs.n	80006bc <__udivmoddi4+0x1f0>
 8000768:	ebb9 0802 	subs.w	r8, r9, r2
 800076c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000770:	3b01      	subs	r3, #1
 8000772:	e7a3      	b.n	80006bc <__udivmoddi4+0x1f0>
 8000774:	4645      	mov	r5, r8
 8000776:	e7ea      	b.n	800074e <__udivmoddi4+0x282>
 8000778:	462b      	mov	r3, r5
 800077a:	e794      	b.n	80006a6 <__udivmoddi4+0x1da>
 800077c:	4640      	mov	r0, r8
 800077e:	e7d1      	b.n	8000724 <__udivmoddi4+0x258>
 8000780:	46d0      	mov	r8, sl
 8000782:	e77b      	b.n	800067c <__udivmoddi4+0x1b0>
 8000784:	3d02      	subs	r5, #2
 8000786:	4462      	add	r2, ip
 8000788:	e732      	b.n	80005f0 <__udivmoddi4+0x124>
 800078a:	4608      	mov	r0, r1
 800078c:	e70a      	b.n	80005a4 <__udivmoddi4+0xd8>
 800078e:	4464      	add	r4, ip
 8000790:	3802      	subs	r0, #2
 8000792:	e742      	b.n	800061a <__udivmoddi4+0x14e>

08000794 <__aeabi_idiv0>:
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop

08000798 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80007a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <vApplicationGetIdleTaskMemory+0x30>)
 80007ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2280      	movs	r2, #128	; 0x80
 80007b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	200000ac 	.word	0x200000ac
 80007c8:	2000014c 	.word	0x2000014c

080007cc <HAL_TIM_IC_CaptureCallback>:
float Kp[4] = {5.0f, 5.0f, 5.0f, 5.0f}; float Ki[4] = {0.01f, 0.0f, 0.0f, 0.0f};
float e_prev[4] = {0.0f, 0.0f, 0.0f, 0.0f}; float e_intgl[4] = {0.0f, 0.0f, 0.0f, 0.0f};

// Encoder interrupt function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6178      	str	r0, [r7, #20]
	// Test
	// Update the counters
	if (htim->Instance == TIM3)			// the up traction motor
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4843      	ldr	r0, [pc, #268]	; (80008e8 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80007dc:	4283      	cmp	r3, r0
 80007de:	d127      	bne.n	8000830 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		counter[1] = __HAL_TIM_GET_COUNTER(htim);
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	2000      	movs	r0, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	4602      	mov	r2, r0
 80007ec:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <HAL_TIM_IC_CaptureCallback+0x120>)
 80007ee:	e9c3 1202 	strd	r1, r2, [r3, #8]
		count[1] = (int32_t)counter[1]/4;
 80007f2:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <HAL_TIM_IC_CaptureCallback+0x120>)
 80007f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80007f8:	4613      	mov	r3, r2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da00      	bge.n	8000800 <HAL_TIM_IC_CaptureCallback+0x34>
 80007fe:	3303      	adds	r3, #3
 8000800:	109b      	asrs	r3, r3, #2
 8000802:	17da      	asrs	r2, r3, #31
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	60fa      	str	r2, [r7, #12]
 8000808:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <HAL_TIM_IC_CaptureCallback+0x124>)
 800080a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800080e:	e9c3 1202 	strd	r1, r2, [r3, #8]
		pos[1] = count[1]/400;
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000814:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000818:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	f7ff fdec 	bl	80003fc <__aeabi_ldivmod>
 8000824:	4602      	mov	r2, r0
 8000826:	460b      	mov	r3, r1
 8000828:	4932      	ldr	r1, [pc, #200]	; (80008f4 <HAL_TIM_IC_CaptureCallback+0x128>)
 800082a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	{
		counter[3] = __HAL_TIM_GET_COUNTER(htim);
		count[3] = (int32_t)counter[3]/4;
		pos[3] = count[2]/400;
	}
}
 800082e:	e056      	b.n	80008de <HAL_TIM_IC_CaptureCallback+0x112>
	else if (htim->Instance == TIM4)	// the Left traction motor
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a30      	ldr	r2, [pc, #192]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d127      	bne.n	800088a <HAL_TIM_IC_CaptureCallback+0xbe>
		counter[2] = __HAL_TIM_GET_COUNTER(htim);
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000840:	2200      	movs	r2, #0
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <HAL_TIM_IC_CaptureCallback+0x120>)
 8000848:	e9d7 1200 	ldrd	r1, r2, [r7]
 800084c:	e9c3 1204 	strd	r1, r2, [r3, #16]
		count[2] = (int32_t)counter[2]/4;
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <HAL_TIM_IC_CaptureCallback+0x120>)
 8000852:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000856:	4613      	mov	r3, r2
 8000858:	2b00      	cmp	r3, #0
 800085a:	da00      	bge.n	800085e <HAL_TIM_IC_CaptureCallback+0x92>
 800085c:	3303      	adds	r3, #3
 800085e:	109b      	asrs	r3, r3, #2
 8000860:	17da      	asrs	r2, r3, #31
 8000862:	469a      	mov	sl, r3
 8000864:	4693      	mov	fp, r2
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000868:	e9c3 ab04 	strd	sl, fp, [r3, #16]
		pos[2] = count[2]/400;
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <HAL_TIM_IC_CaptureCallback+0x124>)
 800086e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000872:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000876:	f04f 0300 	mov.w	r3, #0
 800087a:	f7ff fdbf 	bl	80003fc <__aeabi_ldivmod>
 800087e:	4602      	mov	r2, r0
 8000880:	460b      	mov	r3, r1
 8000882:	491c      	ldr	r1, [pc, #112]	; (80008f4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000884:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000888:	e029      	b.n	80008de <HAL_TIM_IC_CaptureCallback+0x112>
	else if (htim->Instance == TIM5)	// the right traction motor
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <HAL_TIM_IC_CaptureCallback+0x130>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d124      	bne.n	80008de <HAL_TIM_IC_CaptureCallback+0x112>
		counter[3] = __HAL_TIM_GET_COUNTER(htim);
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	2200      	movs	r2, #0
 800089c:	4698      	mov	r8, r3
 800089e:	4691      	mov	r9, r2
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_TIM_IC_CaptureCallback+0x120>)
 80008a2:	e9c3 8906 	strd	r8, r9, [r3, #24]
		count[3] = (int32_t)counter[3]/4;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_TIM_IC_CaptureCallback+0x120>)
 80008a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80008ac:	4613      	mov	r3, r2
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	da00      	bge.n	80008b4 <HAL_TIM_IC_CaptureCallback+0xe8>
 80008b2:	3303      	adds	r3, #3
 80008b4:	109b      	asrs	r3, r3, #2
 80008b6:	17da      	asrs	r2, r3, #31
 80008b8:	461c      	mov	r4, r3
 80008ba:	4615      	mov	r5, r2
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_TIM_IC_CaptureCallback+0x124>)
 80008be:	e9c3 4506 	strd	r4, r5, [r3, #24]
		pos[3] = count[2]/400;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_TIM_IC_CaptureCallback+0x124>)
 80008c4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80008c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	f7ff fd94 	bl	80003fc <__aeabi_ldivmod>
 80008d4:	4602      	mov	r2, r0
 80008d6:	460b      	mov	r3, r1
 80008d8:	4906      	ldr	r1, [pc, #24]	; (80008f4 <HAL_TIM_IC_CaptureCallback+0x128>)
 80008da:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80008e8:	40000400 	.word	0x40000400
 80008ec:	20000620 	.word	0x20000620
 80008f0:	20000640 	.word	0x20000640
 80008f4:	20000660 	.word	0x20000660
 80008f8:	40000800 	.word	0x40000800
 80008fc:	40000c00 	.word	0x40000c00

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b09c      	sub	sp, #112	; 0x70
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f001 fa99 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f8ad 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 fbf9 	bl	8001104 <MX_GPIO_Init>
  MX_DMA_Init();
 8000912:	f000 fbc1 	bl	8001098 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000916:	f000 fb95 	bl	8001044 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800091a:	f000 f90f 	bl	8000b3c <MX_TIM1_Init>
  MX_TIM3_Init();
 800091e:	f000 fa45 	bl	8000dac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000922:	f000 fa9b 	bl	8000e5c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000926:	f000 faed 	bl	8000f04 <MX_TIM5_Init>
  MX_TIM2_Init();
 800092a:	f000 f9cb 	bl	8000cc4 <MX_TIM2_Init>
  MX_TIM10_Init();
 800092e:	f000 fb3d 	bl	8000fac <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  // Encoder Interrupt settings
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000932:	213c      	movs	r1, #60	; 0x3c
 8000934:	483c      	ldr	r0, [pc, #240]	; (8000a28 <main+0x128>)
 8000936:	f002 ffff 	bl	8003938 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800093a:	213c      	movs	r1, #60	; 0x3c
 800093c:	483b      	ldr	r0, [pc, #236]	; (8000a2c <main+0x12c>)
 800093e:	f002 fffb 	bl	8003938 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL); // encoder of the stretch motor
 8000942:	213c      	movs	r1, #60	; 0x3c
 8000944:	483a      	ldr	r0, [pc, #232]	; (8000a30 <main+0x130>)
 8000946:	f002 fff7 	bl	8003938 <HAL_TIM_Encoder_Start_IT>

  // pwm settings
  // TIM2->CCR1 = 50; HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  TIM1->CCR2 = 0; HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Left motor
 800094a:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <main+0x134>)
 800094c:	2200      	movs	r2, #0
 800094e:	639a      	str	r2, [r3, #56]	; 0x38
 8000950:	2104      	movs	r1, #4
 8000952:	4839      	ldr	r0, [pc, #228]	; (8000a38 <main+0x138>)
 8000954:	f002 fe0c 	bl	8003570 <HAL_TIM_PWM_Start>
  TIM1->CCR3 = 0; HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Up motor
 8000958:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <main+0x134>)
 800095a:	2200      	movs	r2, #0
 800095c:	63da      	str	r2, [r3, #60]	; 0x3c
 800095e:	2108      	movs	r1, #8
 8000960:	4835      	ldr	r0, [pc, #212]	; (8000a38 <main+0x138>)
 8000962:	f002 fe05 	bl	8003570 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0; HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Right motor
 8000966:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <main+0x134>)
 8000968:	2200      	movs	r2, #0
 800096a:	635a      	str	r2, [r3, #52]	; 0x34
 800096c:	2100      	movs	r1, #0
 800096e:	482f      	ldr	r0, [pc, #188]	; (8000a2c <main+0x12c>)
 8000970:	f002 fdfe 	bl	8003570 <HAL_TIM_PWM_Start>
  TIM10->CCR1 = 50; HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000974:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <main+0x13c>)
 8000976:	2232      	movs	r2, #50	; 0x32
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
 800097a:	2100      	movs	r1, #0
 800097c:	4830      	ldr	r0, [pc, #192]	; (8000a40 <main+0x140>)
 800097e:	f002 fdf7 	bl	8003570 <HAL_TIM_PWM_Start>
  // Motor controller STB pin
  HAL_GPIO_WritePin(STB_GPIO_Port, STB_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000988:	482e      	ldr	r0, [pc, #184]	; (8000a44 <main+0x144>)
 800098a:	f001 ffe9 	bl	8002960 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of dataSender */
  osThreadDef(dataSender, Task_dataSender, osPriorityBelowNormal, 0, 128);
 800098e:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <main+0x148>)
 8000990:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000994:	461d      	mov	r5, r3
 8000996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800099e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dataSenderHandle = osThreadCreate(osThread(dataSender), NULL);
 80009a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 fab4 	bl	8004f16 <osThreadCreate>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a26      	ldr	r2, [pc, #152]	; (8000a4c <main+0x14c>)
 80009b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of sMotorCtrl */
  osThreadDef(sMotorCtrl, Task_SMotor, osPriorityNormal, 0, 128);
 80009b4:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <main+0x150>)
 80009b6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80009ba:	461d      	mov	r5, r3
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sMotorCtrlHandle = osThreadCreate(osThread(sMotorCtrl), NULL);
 80009c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 faa1 	bl	8004f16 <osThreadCreate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <main+0x154>)
 80009d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of dataReceiver */
  osThreadDef(dataReceiver, Task_dataReceiver, osPriorityNormal, 0, 128);
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <main+0x158>)
 80009dc:	f107 041c 	add.w	r4, r7, #28
 80009e0:	461d      	mov	r5, r3
 80009e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dataReceiverHandle = osThreadCreate(osThread(dataReceiver), NULL);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 fa8e 	bl	8004f16 <osThreadCreate>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <main+0x15c>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of timeCounter */
  osThreadDef(timeCounter, Task_timeCounter, osPriorityAboveNormal, 0, 128);
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <main+0x160>)
 8000a02:	463c      	mov	r4, r7
 8000a04:	461d      	mov	r5, r3
 8000a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  timeCounterHandle = osThreadCreate(osThread(timeCounter), NULL);
 8000a12:	463b      	mov	r3, r7
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 fa7d 	bl	8004f16 <osThreadCreate>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <main+0x164>)
 8000a20:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a22:	f004 fa71 	bl	8004f08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <main+0x126>
 8000a28:	200003dc 	.word	0x200003dc
 8000a2c:	20000424 	.word	0x20000424
 8000a30:	2000046c 	.word	0x2000046c
 8000a34:	40010000 	.word	0x40010000
 8000a38:	2000034c 	.word	0x2000034c
 8000a3c:	40014400 	.word	0x40014400
 8000a40:	200004b4 	.word	0x200004b4
 8000a44:	40020800 	.word	0x40020800
 8000a48:	080065a8 	.word	0x080065a8
 8000a4c:	20000600 	.word	0x20000600
 8000a50:	080065d0 	.word	0x080065d0
 8000a54:	20000604 	.word	0x20000604
 8000a58:	080065fc 	.word	0x080065fc
 8000a5c:	20000608 	.word	0x20000608
 8000a60:	08006624 	.word	0x08006624
 8000a64:	2000060c 	.word	0x2000060c

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f005 fca8 	bl	80063cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <SystemClock_Config+0xcc>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a27      	ldr	r2, [pc, #156]	; (8000b34 <SystemClock_Config+0xcc>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <SystemClock_Config+0xcc>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <SystemClock_Config+0xd0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <SystemClock_Config+0xd0>)
 8000ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <SystemClock_Config+0xd0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000ae0:	2350      	movs	r3, #80	; 0x50
 8000ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 0320 	add.w	r3, r7, #32
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 ff67 	bl	80029c4 <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000afc:	f000 fdee 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	230f      	movs	r3, #15
 8000b02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2302      	movs	r3, #2
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 f9c9 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b28:	f000 fdd8 	bl	80016dc <Error_Handler>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3750      	adds	r7, #80	; 0x50
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b096      	sub	sp, #88	; 0x58
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2220      	movs	r2, #32
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f005 fc29 	bl	80063cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b7a:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000b7c:	4a50      	ldr	r2, [pc, #320]	; (8000cc0 <MX_TIM1_Init+0x184>)
 8000b7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000b80:	4b4e      	ldr	r3, [pc, #312]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000b82:	224f      	movs	r2, #79	; 0x4f
 8000b84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b4d      	ldr	r3, [pc, #308]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000b8c:	4b4b      	ldr	r3, [pc, #300]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000b8e:	2263      	movs	r2, #99	; 0x63
 8000b90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b92:	4b4a      	ldr	r3, [pc, #296]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b98:	4b48      	ldr	r3, [pc, #288]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b9e:	4b47      	ldr	r3, [pc, #284]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ba4:	4845      	ldr	r0, [pc, #276]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000ba6:	f002 fbd7 	bl	8003358 <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000bb0:	f000 fd94 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	483e      	ldr	r0, [pc, #248]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000bc2:	f003 f931 	bl	8003e28 <HAL_TIM_ConfigClockSource>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f000 fd86 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bd0:	483a      	ldr	r0, [pc, #232]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000bd2:	f002 fc73 	bl	80034bc <HAL_TIM_PWM_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000bdc:	f000 fd7e 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bec:	4619      	mov	r1, r3
 8000bee:	4833      	ldr	r0, [pc, #204]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000bf0:	f003 fccc 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000bfa:	f000 fd6f 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	2360      	movs	r3, #96	; 0x60
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	4826      	ldr	r0, [pc, #152]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000c24:	f003 f83e 	bl	8003ca4 <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000c2e:	f000 fd55 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	2204      	movs	r2, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4820      	ldr	r0, [pc, #128]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000c3c:	f003 f832 	bl	8003ca4 <HAL_TIM_PWM_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000c46:	f000 fd49 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	2208      	movs	r2, #8
 8000c50:	4619      	mov	r1, r3
 8000c52:	481a      	ldr	r0, [pc, #104]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000c54:	f003 f826 	bl	8003ca4 <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000c5e:	f000 fd3d 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	220c      	movs	r2, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4814      	ldr	r0, [pc, #80]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000c6c:	f003 f81a 	bl	8003ca4 <HAL_TIM_PWM_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000c76:	f000 fd31 	bl	80016dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000c9e:	f003 fce3 	bl	8004668 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000ca8:	f000 fd18 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <MX_TIM1_Init+0x180>)
 8000cae:	f000 fea9 	bl	8001a04 <HAL_TIM_MspPostInit>

}
 8000cb2:	bf00      	nop
 8000cb4:	3758      	adds	r7, #88	; 0x58
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000034c 	.word	0x2000034c
 8000cc0:	40010000 	.word	0x40010000

08000cc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	; 0x38
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000cfe:	224f      	movs	r2, #79	; 0x4f
 8000d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d0a:	2263      	movs	r2, #99	; 0x63
 8000d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1a:	4823      	ldr	r0, [pc, #140]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d1c:	f002 fb1c 	bl	8003358 <HAL_TIM_Base_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000d26:	f000 fcd9 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d34:	4619      	mov	r1, r3
 8000d36:	481c      	ldr	r0, [pc, #112]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d38:	f003 f876 	bl	8003e28 <HAL_TIM_ConfigClockSource>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d42:	f000 fccb 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d46:	4818      	ldr	r0, [pc, #96]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d48:	f002 fbb8 	bl	80034bc <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d52:	f000 fcc3 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	4619      	mov	r1, r3
 8000d64:	4810      	ldr	r0, [pc, #64]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d66:	f003 fc11 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000d70:	f000 fcb4 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d8c:	f002 ff8a 	bl	8003ca4 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000d96:	f000 fca1 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d9c:	f000 fe32 	bl	8001a04 <HAL_TIM_MspPostInit>

}
 8000da0:	bf00      	nop
 8000da2:	3738      	adds	r7, #56	; 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000394 	.word	0x20000394

08000dac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	; 0x30
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	2224      	movs	r2, #36	; 0x24
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f005 fb06 	bl	80063cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_TIM3_Init+0xa8>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_TIM3_Init+0xac>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_TIM3_Init+0xa8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_TIM3_Init+0xa8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_TIM3_Init+0xa8>)
 8000ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_TIM3_Init+0xa8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_TIM3_Init+0xa8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dee:	2303      	movs	r3, #3
 8000df0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000df2:	2302      	movs	r3, #2
 8000df4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000e02:	2302      	movs	r3, #2
 8000e04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e06:	2301      	movs	r3, #1
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_TIM3_Init+0xa8>)
 8000e1a:	f002 fc59 	bl	80036d0 <HAL_TIM_Encoder_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e24:	f000 fc5a 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_TIM3_Init+0xa8>)
 8000e36:	f003 fba9 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e40:	f000 fc4c 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000e44:	213c      	movs	r1, #60	; 0x3c
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <MX_TIM3_Init+0xa8>)
 8000e48:	f002 fce8 	bl	800381c <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200003dc 	.word	0x200003dc
 8000e58:	40000400 	.word	0x40000400

08000e5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2224      	movs	r2, #36	; 0x24
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f005 faae 	bl	80063cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_TIM4_Init+0xa0>)
 8000e7a:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <MX_TIM4_Init+0xa4>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_TIM4_Init+0xa0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_TIM4_Init+0xa0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_TIM4_Init+0xa0>)
 8000e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_TIM4_Init+0xa0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_TIM4_Init+0xa0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_TIM4_Init+0xa0>)
 8000eca:	f002 fc01 	bl	80036d0 <HAL_TIM_Encoder_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ed4:	f000 fc02 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_TIM4_Init+0xa0>)
 8000ee6:	f003 fb51 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ef0:	f000 fbf4 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000424 	.word	0x20000424
 8000f00:	40000800 	.word	0x40000800

08000f04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2224      	movs	r2, #36	; 0x24
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 fa5a 	bl	80063cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_TIM5_Init+0xa0>)
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <MX_TIM5_Init+0xa4>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_TIM5_Init+0xa0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM5_Init+0xa0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_TIM5_Init+0xa0>)
 8000f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_TIM5_Init+0xa0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_TIM5_Init+0xa0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f46:	2303      	movs	r3, #3
 8000f48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_TIM5_Init+0xa0>)
 8000f72:	f002 fbad 	bl	80036d0 <HAL_TIM_Encoder_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000f7c:	f000 fbae 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_TIM5_Init+0xa0>)
 8000f8e:	f003 fafd 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000f98:	f000 fba0 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	; 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000046c 	.word	0x2000046c
 8000fa8:	40000c00 	.word	0x40000c00

08000fac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_TIM10_Init+0x90>)
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <MX_TIM10_Init+0x94>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 80-1;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_TIM10_Init+0x90>)
 8000fcc:	224f      	movs	r2, #79	; 0x4f
 8000fce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM10_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_TIM10_Init+0x90>)
 8000fd8:	2263      	movs	r2, #99	; 0x63
 8000fda:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_TIM10_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_TIM10_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000fe8:	4814      	ldr	r0, [pc, #80]	; (800103c <MX_TIM10_Init+0x90>)
 8000fea:	f002 f9b5 	bl	8003358 <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8000ff4:	f000 fb72 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <MX_TIM10_Init+0x90>)
 8000ffa:	f002 fa5f 	bl	80034bc <HAL_TIM_PWM_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001004:	f000 fb6a 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001008:	2360      	movs	r3, #96	; 0x60
 800100a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <MX_TIM10_Init+0x90>)
 8001020:	f002 fe40 	bl	8003ca4 <HAL_TIM_PWM_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 800102a:	f000 fb57 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <MX_TIM10_Init+0x90>)
 8001030:	f000 fce8 	bl	8001a04 <HAL_TIM_MspPostInit>

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200004b4 	.word	0x200004b4
 8001040:	40014400 	.word	0x40014400

08001044 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART2_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800107c:	f003 fb5a 	bl	8004734 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f000 fb29 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000055c 	.word	0x2000055c
 8001094:	40004400 	.word	0x40004400

08001098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_DMA_Init+0x68>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <MX_DMA_Init+0x68>)
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_DMA_Init+0x68>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MX_DMA_Init+0x68>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <MX_DMA_Init+0x68>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <MX_DMA_Init+0x68>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2105      	movs	r1, #5
 80010da:	2011      	movs	r0, #17
 80010dc:	f000 ffa8 	bl	8002030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010e0:	2011      	movs	r0, #17
 80010e2:	f000 ffc1 	bl	8002068 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2105      	movs	r1, #5
 80010ea:	2039      	movs	r0, #57	; 0x39
 80010ec:	f000 ffa0 	bl	8002030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010f0:	2039      	movs	r0, #57	; 0x39
 80010f2:	f000 ffb9 	bl	8002068 <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <MX_GPIO_Init+0x14c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a4b      	ldr	r2, [pc, #300]	; (8001250 <MX_GPIO_Init+0x14c>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b49      	ldr	r3, [pc, #292]	; (8001250 <MX_GPIO_Init+0x14c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b45      	ldr	r3, [pc, #276]	; (8001250 <MX_GPIO_Init+0x14c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a44      	ldr	r2, [pc, #272]	; (8001250 <MX_GPIO_Init+0x14c>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <MX_GPIO_Init+0x14c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <MX_GPIO_Init+0x14c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a3d      	ldr	r2, [pc, #244]	; (8001250 <MX_GPIO_Init+0x14c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <MX_GPIO_Init+0x14c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <MX_GPIO_Init+0x14c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a36      	ldr	r2, [pc, #216]	; (8001250 <MX_GPIO_Init+0x14c>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <MX_GPIO_Init+0x14c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorStretch_ENA_Pin|LED_Pin|MotorUp_ENA_Pin|MotorUp_ENB_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	21f0      	movs	r1, #240	; 0xf0
 800118e:	4831      	ldr	r0, [pc, #196]	; (8001254 <MX_GPIO_Init+0x150>)
 8001190:	f001 fbe6 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorLeft_ENA_Pin|MotorLeft_ENB_Pin|STB_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 6103 	mov.w	r1, #2096	; 0x830
 800119a:	482f      	ldr	r0, [pc, #188]	; (8001258 <MX_GPIO_Init+0x154>)
 800119c:	f001 fbe0 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorRight_ENA_Pin|MotorRight_ENB_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2103      	movs	r1, #3
 80011a4:	482d      	ldr	r0, [pc, #180]	; (800125c <MX_GPIO_Init+0x158>)
 80011a6:	f001 fbdb 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4825      	ldr	r0, [pc, #148]	; (8001258 <MX_GPIO_Init+0x154>)
 80011c2:	f001 fa49 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorStretch_ENA_Pin LED_Pin MotorUp_ENA_Pin MotorUp_ENB_Pin */
  GPIO_InitStruct.Pin = MotorStretch_ENA_Pin|LED_Pin|MotorUp_ENA_Pin|MotorUp_ENB_Pin;
 80011c6:	23f0      	movs	r3, #240	; 0xf0
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	481d      	ldr	r0, [pc, #116]	; (8001254 <MX_GPIO_Init+0x150>)
 80011de:	f001 fa3b 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorLeft_ENA_Pin MotorLeft_ENB_Pin STB_Pin */
  GPIO_InitStruct.Pin = MotorLeft_ENA_Pin|MotorLeft_ENB_Pin|STB_Pin;
 80011e2:	f44f 6303 	mov.w	r3, #2096	; 0x830
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4817      	ldr	r0, [pc, #92]	; (8001258 <MX_GPIO_Init+0x154>)
 80011fc:	f001 fa2c 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorRight_ENA_Pin MotorRight_ENB_Pin */
  GPIO_InitStruct.Pin = MotorRight_ENA_Pin|MotorRight_ENB_Pin;
 8001200:	2303      	movs	r3, #3
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_GPIO_Init+0x158>)
 8001218:	f001 fa1e 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : stretchLimit_Pin */
  GPIO_InitStruct.Pin = stretchLimit_Pin;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(stretchLimit_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <MX_GPIO_Init+0x158>)
 8001232:	f001 fa11 	bl	8002658 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2105      	movs	r1, #5
 800123a:	2028      	movs	r0, #40	; 0x28
 800123c:	f000 fef8 	bl	8002030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001240:	2028      	movs	r0, #40	; 0x28
 8001242:	f000 ff11 	bl	8002068 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020800 	.word	0x40020800
 800125c:	40020400 	.word	0x40020400

08001260 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt Function for Encoders
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]

}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <Task_dataSender>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_dataSender */
void Task_dataSender(void const * argument)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  {
	  // Receive data from UART
	  // HAL_UART_Receive(&huart2, RxData, 5, HAL_MAX_DELAY);
	  // slice the data

    osDelay(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f003 fe95 	bl	8004fae <osDelay>
 8001284:	e7fb      	b.n	800127e <Task_dataSender+0x8>
	...

08001288 <Task_SMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_SMotor */
void Task_SMotor(void const * argument)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b098      	sub	sp, #96	; 0x60
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_SMotor */
	// Motor parameters
	// int traction_tks2Rd = 32000;
	float e[4] = {0, 0, 0, 0};
 8001290:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
	float u[4] = {0, 0, 0, 0};
 800129e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
	int dir[4] = {0, 0, 0, 0};
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
	int pwr2motor[4] = {0, 0, 0, 0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
	// Pull STB pin as high
	HAL_GPIO_WritePin(STB_GPIO_Port, STB_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ce:	4886      	ldr	r0, [pc, #536]	; (80014e8 <Task_SMotor+0x260>)
 80012d0:	f001 fb46 	bl	8002960 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  // Calculate error
	  for (int i = 0; i<4; i++) e[i] = velTarget[i] - vel[i];
 80012d4:	2300      	movs	r3, #0
 80012d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012d8:	e017      	b.n	800130a <Task_SMotor+0x82>
 80012da:	4a84      	ldr	r2, [pc, #528]	; (80014ec <Task_SMotor+0x264>)
 80012dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	ed93 7a00 	vldr	s14, [r3]
 80012e6:	4a82      	ldr	r2, [pc, #520]	; (80014f0 <Task_SMotor+0x268>)
 80012e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	3360      	adds	r3, #96	; 0x60
 80012fc:	443b      	add	r3, r7
 80012fe:	3b24      	subs	r3, #36	; 0x24
 8001300:	edc3 7a00 	vstr	s15, [r3]
 8001304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001306:	3301      	adds	r3, #1
 8001308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800130a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130c:	2b03      	cmp	r3, #3
 800130e:	dde4      	ble.n	80012da <Task_SMotor+0x52>
	  // Calculate control signal
	  for (int i = 0; i<4; i++) u[i] = Kp[i]*e[i] + Ki[i]*e_intgl[i];
 8001310:	2300      	movs	r3, #0
 8001312:	65bb      	str	r3, [r7, #88]	; 0x58
 8001314:	e028      	b.n	8001368 <Task_SMotor+0xe0>
 8001316:	4a77      	ldr	r2, [pc, #476]	; (80014f4 <Task_SMotor+0x26c>)
 8001318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	3360      	adds	r3, #96	; 0x60
 8001328:	443b      	add	r3, r7
 800132a:	3b24      	subs	r3, #36	; 0x24
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001334:	4a70      	ldr	r2, [pc, #448]	; (80014f8 <Task_SMotor+0x270>)
 8001336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	edd3 6a00 	vldr	s13, [r3]
 8001340:	4a6e      	ldr	r2, [pc, #440]	; (80014fc <Task_SMotor+0x274>)
 8001342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	3360      	adds	r3, #96	; 0x60
 800135a:	443b      	add	r3, r7
 800135c:	3b34      	subs	r3, #52	; 0x34
 800135e:	edc3 7a00 	vstr	s15, [r3]
 8001362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001364:	3301      	adds	r3, #1
 8001366:	65bb      	str	r3, [r7, #88]	; 0x58
 8001368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800136a:	2b03      	cmp	r3, #3
 800136c:	ddd3      	ble.n	8001316 <Task_SMotor+0x8e>
	  // Power output for motor controller
	  for (int i = 0; i<4; i++) dir[i] = (u[i]>=0)? 1: -1; // direction
 800136e:	2300      	movs	r3, #0
 8001370:	657b      	str	r3, [r7, #84]	; 0x54
 8001372:	e018      	b.n	80013a6 <Task_SMotor+0x11e>
 8001374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	3360      	adds	r3, #96	; 0x60
 800137a:	443b      	add	r3, r7
 800137c:	3b34      	subs	r3, #52	; 0x34
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	db01      	blt.n	8001390 <Task_SMotor+0x108>
 800138c:	2201      	movs	r2, #1
 800138e:	e001      	b.n	8001394 <Task_SMotor+0x10c>
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	3360      	adds	r3, #96	; 0x60
 800139a:	443b      	add	r3, r7
 800139c:	f843 2c44 	str.w	r2, [r3, #-68]
 80013a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a2:	3301      	adds	r3, #1
 80013a4:	657b      	str	r3, [r7, #84]	; 0x54
 80013a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	dde3      	ble.n	8001374 <Task_SMotor+0xec>
	  for (int i = 0; i<4; i++) pwr2motor[i] = (u[i] > 100)? 100: (int)u[i]; // PWM saturation
 80013ac:	2300      	movs	r3, #0
 80013ae:	653b      	str	r3, [r7, #80]	; 0x50
 80013b0:	e023      	b.n	80013fa <Task_SMotor+0x172>
 80013b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	3360      	adds	r3, #96	; 0x60
 80013b8:	443b      	add	r3, r7
 80013ba:	3b34      	subs	r3, #52	; 0x34
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001500 <Task_SMotor+0x278>
 80013c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	dd01      	ble.n	80013d2 <Task_SMotor+0x14a>
 80013ce:	2264      	movs	r2, #100	; 0x64
 80013d0:	e00a      	b.n	80013e8 <Task_SMotor+0x160>
 80013d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3360      	adds	r3, #96	; 0x60
 80013d8:	443b      	add	r3, r7
 80013da:	3b34      	subs	r3, #52	; 0x34
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e4:	ee17 2a90 	vmov	r2, s15
 80013e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	3360      	adds	r3, #96	; 0x60
 80013ee:	443b      	add	r3, r7
 80013f0:	f843 2c54 	str.w	r2, [r3, #-84]
 80013f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f6:	3301      	adds	r3, #1
 80013f8:	653b      	str	r3, [r7, #80]	; 0x50
 80013fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	ddd8      	ble.n	80013b2 <Task_SMotor+0x12a>

	  // Motors control
	  // Motor Up
	  TIM1->CCR3 = pwr2motor[1];
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <Task_SMotor+0x27c>)
 8001404:	63da      	str	r2, [r3, #60]	; 0x3c
	  if (dir[1] == 1)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d10a      	bne.n	8001422 <Task_SMotor+0x19a>
	  {
		  HAL_GPIO_WritePin(MotorUp_ENA_GPIO_Port, MotorUp_ENA_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2140      	movs	r1, #64	; 0x40
 8001410:	483d      	ldr	r0, [pc, #244]	; (8001508 <Task_SMotor+0x280>)
 8001412:	f001 faa5 	bl	8002960 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MotorUp_ENB_GPIO_Port, MotorUp_ENB_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	483b      	ldr	r0, [pc, #236]	; (8001508 <Task_SMotor+0x280>)
 800141c:	f001 faa0 	bl	8002960 <HAL_GPIO_WritePin>
 8001420:	e009      	b.n	8001436 <Task_SMotor+0x1ae>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(MotorUp_ENA_GPIO_Port, MotorUp_ENA_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	4838      	ldr	r0, [pc, #224]	; (8001508 <Task_SMotor+0x280>)
 8001428:	f001 fa9a 	bl	8002960 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MotorUp_ENB_GPIO_Port, MotorUp_ENB_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	4835      	ldr	r0, [pc, #212]	; (8001508 <Task_SMotor+0x280>)
 8001432:	f001 fa95 	bl	8002960 <HAL_GPIO_WritePin>
	  }
	  // Motor left
	  TIM1->CCR2 = pwr2motor[2];
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <Task_SMotor+0x27c>)
 800143a:	639a      	str	r2, [r3, #56]	; 0x38
	  if (dir[2] == 1)
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	2b01      	cmp	r3, #1
 8001440:	d10a      	bne.n	8001458 <Task_SMotor+0x1d0>
	  {
		  HAL_GPIO_WritePin(MotorLeft_ENA_GPIO_Port, MotorLeft_ENA_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2110      	movs	r1, #16
 8001446:	4828      	ldr	r0, [pc, #160]	; (80014e8 <Task_SMotor+0x260>)
 8001448:	f001 fa8a 	bl	8002960 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MotorLeft_ENB_GPIO_Port, MotorLeft_ENB_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2120      	movs	r1, #32
 8001450:	4825      	ldr	r0, [pc, #148]	; (80014e8 <Task_SMotor+0x260>)
 8001452:	f001 fa85 	bl	8002960 <HAL_GPIO_WritePin>
 8001456:	e009      	b.n	800146c <Task_SMotor+0x1e4>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(MotorLeft_ENA_GPIO_Port, MotorLeft_ENA_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2110      	movs	r1, #16
 800145c:	4822      	ldr	r0, [pc, #136]	; (80014e8 <Task_SMotor+0x260>)
 800145e:	f001 fa7f 	bl	8002960 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MotorLeft_ENB_GPIO_Port, MotorLeft_ENB_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2120      	movs	r1, #32
 8001466:	4820      	ldr	r0, [pc, #128]	; (80014e8 <Task_SMotor+0x260>)
 8001468:	f001 fa7a 	bl	8002960 <HAL_GPIO_WritePin>
	  }
	  // Motor right
	  TIM10->CCR1 = pwr2motor[3];
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <Task_SMotor+0x284>)
 8001470:	635a      	str	r2, [r3, #52]	; 0x34
	  if (dir[3] == 1)
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10a      	bne.n	800148e <Task_SMotor+0x206>
	  {
		  HAL_GPIO_WritePin(MotorRight_ENA_GPIO_Port, MotorRight_ENA_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2101      	movs	r1, #1
 800147c:	4824      	ldr	r0, [pc, #144]	; (8001510 <Task_SMotor+0x288>)
 800147e:	f001 fa6f 	bl	8002960 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MotorRight_ENB_GPIO_Port, MotorRight_ENB_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2102      	movs	r1, #2
 8001486:	4822      	ldr	r0, [pc, #136]	; (8001510 <Task_SMotor+0x288>)
 8001488:	f001 fa6a 	bl	8002960 <HAL_GPIO_WritePin>
 800148c:	e009      	b.n	80014a2 <Task_SMotor+0x21a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(MotorRight_ENA_GPIO_Port, MotorRight_ENA_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2101      	movs	r1, #1
 8001492:	481f      	ldr	r0, [pc, #124]	; (8001510 <Task_SMotor+0x288>)
 8001494:	f001 fa64 	bl	8002960 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MotorRight_ENB_GPIO_Port, MotorRight_ENB_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2102      	movs	r1, #2
 800149c:	481c      	ldr	r0, [pc, #112]	; (8001510 <Task_SMotor+0x288>)
 800149e:	f001 fa5f 	bl	8002960 <HAL_GPIO_WritePin>
	  }

	  // Update variables
	  for (int i = 0; i<4; i++) e_intgl[i] += e[i];
 80014a2:	2300      	movs	r3, #0
 80014a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014a6:	e017      	b.n	80014d8 <Task_SMotor+0x250>
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <Task_SMotor+0x274>)
 80014aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	3360      	adds	r3, #96	; 0x60
 80014ba:	443b      	add	r3, r7
 80014bc:	3b24      	subs	r3, #36	; 0x24
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c6:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <Task_SMotor+0x274>)
 80014c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	edc3 7a00 	vstr	s15, [r3]
 80014d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d4:	3301      	adds	r3, #1
 80014d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014da:	2b03      	cmp	r3, #3
 80014dc:	dde4      	ble.n	80014a8 <Task_SMotor+0x220>
    osDelay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f003 fd65 	bl	8004fae <osDelay>
	  for (int i = 0; i<4; i++) e[i] = velTarget[i] - vel[i];
 80014e4:	e6f6      	b.n	80012d4 <Task_SMotor+0x4c>
 80014e6:	bf00      	nop
 80014e8:	40020800 	.word	0x40020800
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000680 	.word	0x20000680
 80014f4:	20000010 	.word	0x20000010
 80014f8:	20000020 	.word	0x20000020
 80014fc:	20000690 	.word	0x20000690
 8001500:	42c80000 	.word	0x42c80000
 8001504:	40010000 	.word	0x40010000
 8001508:	40020000 	.word	0x40020000
 800150c:	40014400 	.word	0x40014400
 8001510:	40020400 	.word	0x40020400

08001514 <Task_dataReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_dataReceiver */
void Task_dataReceiver(void const * argument)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_dataReceiver */
	uint16_t velMax = 800;	// the maximum velocity can be driven, get the value by experiment
 800151c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001520:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  // Receive the data
	  HAL_UART_Receive(&huart2, (uint8_t *)RxData, 5, HAL_MAX_DELAY);
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	2205      	movs	r2, #5
 8001528:	492a      	ldr	r1, [pc, #168]	; (80015d4 <Task_dataReceiver+0xc0>)
 800152a:	482b      	ldr	r0, [pc, #172]	; (80015d8 <Task_dataReceiver+0xc4>)
 800152c:	f003 f94f 	bl	80047ce <HAL_UART_Receive>
	  // slice the data into wanted parts
	  uint8_t id = RxData[0] - '0';	// subtract '0' to get numeric values
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <Task_dataReceiver+0xc0>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3b30      	subs	r3, #48	; 0x30
 8001536:	737b      	strb	r3, [r7, #13]
	  uint8_t dirTarget = (RxData[1] == '1')? 1: 0;	// determine motor direction
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <Task_dataReceiver+0xc0>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	2b31      	cmp	r3, #49	; 0x31
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	733b      	strb	r3, [r7, #12]
	  uint8_t velCom = (RxData[2] - '0') * 100 + (RxData[3] - '0') * 10 + (RxData[4] - '0');
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <Task_dataReceiver+0xc0>)
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	461a      	mov	r2, r3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4413      	add	r3, r2
 8001552:	461a      	mov	r2, r3
 8001554:	0091      	lsls	r1, r2, #2
 8001556:	461a      	mov	r2, r3
 8001558:	460b      	mov	r3, r1
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <Task_dataReceiver+0xc0>)
 8001562:	78db      	ldrb	r3, [r3, #3]
 8001564:	4619      	mov	r1, r3
 8001566:	0089      	lsls	r1, r1, #2
 8001568:	440b      	add	r3, r1
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4413      	add	r3, r2
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <Task_dataReceiver+0xc0>)
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	4413      	add	r3, r2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3330      	adds	r3, #48	; 0x30
 800157c:	72fb      	strb	r3, [r7, #11]
	  // uint8_t travCom = (RxData[5] - '0') * 10 + (RxData[6] - '0');
	  // Set the value to the control module
	  // count[id] = 0; // Reset the moved distance
	  velTarget[id] = (dirTarget == 1) ? velCom*velMax/100 : -1*velCom*velMax/100;
 800157e:	7b3b      	ldrb	r3, [r7, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10e      	bne.n	80015a2 <Task_dataReceiver+0x8e>
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	89fa      	ldrh	r2, [r7, #14]
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <Task_dataReceiver+0xc8>)
 800158e:	fb82 1203 	smull	r1, r2, r2, r3
 8001592:	1152      	asrs	r2, r2, #5
 8001594:	17db      	asrs	r3, r3, #31
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	e00e      	b.n	80015c0 <Task_dataReceiver+0xac>
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	425b      	negs	r3, r3
 80015a6:	89fa      	ldrh	r2, [r7, #14]
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <Task_dataReceiver+0xc8>)
 80015ae:	fb82 1203 	smull	r1, r2, r2, r3
 80015b2:	1152      	asrs	r2, r2, #5
 80015b4:	17db      	asrs	r3, r3, #31
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	7b7b      	ldrb	r3, [r7, #13]
 80015c2:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <Task_dataReceiver+0xcc>)
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	edc3 7a00 	vstr	s15, [r3]
	  // travTarget[id] = travCom;
	  // print out debug messages to the ITM console
	  // printf("Receiving id: %d, velocity set as: %d, travel set as: %d\n", id, velCom, trvCom);
    osDelay(100);
 80015cc:	2064      	movs	r0, #100	; 0x64
 80015ce:	f003 fcee 	bl	8004fae <osDelay>
  {
 80015d2:	e7a6      	b.n	8001522 <Task_dataReceiver+0xe>
 80015d4:	20000610 	.word	0x20000610
 80015d8:	2000055c 	.word	0x2000055c
 80015dc:	51eb851f 	.word	0x51eb851f
 80015e0:	20000000 	.word	0x20000000

080015e4 <Task_timeCounter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_timeCounter */
void Task_timeCounter(void const * argument)
{
 80015e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015e8:	b08a      	sub	sp, #40	; 0x28
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_timeCounter */
	uint16_t timeCount = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t timeInterval = 500; // 500 mili-seconds
 80015f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015f6:	837b      	strh	r3, [r7, #26]
	// previous value
	int32_t posPrev[4] = {0, 0, 0, 0};
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {
	  timeCount++;
 8001606:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001608:	3301      	adds	r3, #1
 800160a:	84fb      	strh	r3, [r7, #38]	; 0x26
	  // calculate every "timeInterval" mili-seconds
	  if (timeCount >= timeInterval)
 800160c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800160e:	8b7b      	ldrh	r3, [r7, #26]
 8001610:	429a      	cmp	r2, r3
 8001612:	d341      	bcc.n	8001698 <Task_timeCounter+0xb4>
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2120      	movs	r1, #32
 8001618:	4824      	ldr	r0, [pc, #144]	; (80016ac <Task_timeCounter+0xc8>)
 800161a:	f001 f9a1 	bl	8002960 <HAL_GPIO_WritePin>

		  timeCount = 0;	// Reset the counter
 800161e:	2300      	movs	r3, #0
 8001620:	84fb      	strh	r3, [r7, #38]	; 0x26
		  // Calculate velocity
		  for (int i = 0; i < 4; i++) vel[i] = pos[i] - posPrev[i];
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
 8001626:	e01f      	b.n	8001668 <Task_timeCounter+0x84>
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <Task_timeCounter+0xcc>)
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	6a39      	ldr	r1, [r7, #32]
 8001636:	0089      	lsls	r1, r1, #2
 8001638:	3128      	adds	r1, #40	; 0x28
 800163a:	4439      	add	r1, r7
 800163c:	f851 1c20 	ldr.w	r1, [r1, #-32]
 8001640:	17c8      	asrs	r0, r1, #31
 8001642:	460c      	mov	r4, r1
 8001644:	4605      	mov	r5, r0
 8001646:	ebb2 0804 	subs.w	r8, r2, r4
 800164a:	eb63 0905 	sbc.w	r9, r3, r5
 800164e:	4640      	mov	r0, r8
 8001650:	4649      	mov	r1, r9
 8001652:	f7fe fe95 	bl	8000380 <__aeabi_l2f>
 8001656:	4602      	mov	r2, r0
 8001658:	4916      	ldr	r1, [pc, #88]	; (80016b4 <Task_timeCounter+0xd0>)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	3301      	adds	r3, #1
 8001666:	623b      	str	r3, [r7, #32]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	2b03      	cmp	r3, #3
 800166c:	dddc      	ble.n	8001628 <Task_timeCounter+0x44>
		  // Update previous position
		  for (int i = 0; i < 4; i++) posPrev[i] = pos[i];
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e00e      	b.n	8001692 <Task_timeCounter+0xae>
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <Task_timeCounter+0xcc>)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3328      	adds	r3, #40	; 0x28
 8001686:	443b      	add	r3, r7
 8001688:	f843 2c20 	str.w	r2, [r3, #-32]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	3301      	adds	r3, #1
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	2b03      	cmp	r3, #3
 8001696:	dded      	ble.n	8001674 <Task_timeCounter+0x90>
	  }
    osDelay(1);
 8001698:	2001      	movs	r0, #1
 800169a:	f003 fc88 	bl	8004fae <osDelay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2120      	movs	r1, #32
 80016a2:	4802      	ldr	r0, [pc, #8]	; (80016ac <Task_timeCounter+0xc8>)
 80016a4:	f001 f95c 	bl	8002960 <HAL_GPIO_WritePin>
	  timeCount++;
 80016a8:	e7ad      	b.n	8001606 <Task_timeCounter+0x22>
 80016aa:	bf00      	nop
 80016ac:	40020000 	.word	0x40020000
 80016b0:	20000660 	.word	0x20000660
 80016b4:	20000680 	.word	0x20000680

080016b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ca:	f000 fbd9 	bl	8001e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40014800 	.word	0x40014800

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <Error_Handler+0x8>
	...

080016e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_MspInit+0x54>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <HAL_MspInit+0x54>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_MspInit+0x54>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_MspInit+0x54>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_MspInit+0x54>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_MspInit+0x54>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	210f      	movs	r1, #15
 800172a:	f06f 0001 	mvn.w	r0, #1
 800172e:	f000 fc7f 	bl	8002030 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a42      	ldr	r2, [pc, #264]	; (8001858 <HAL_TIM_Base_MspInit+0x118>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d14e      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_TIM_Base_MspInit+0x11c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a40      	ldr	r2, [pc, #256]	; (800185c <HAL_TIM_Base_MspInit+0x11c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_TIM_Base_MspInit+0x11c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 8001770:	4a3c      	ldr	r2, [pc, #240]	; (8001864 <HAL_TIM_Base_MspInit+0x124>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001774:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 8001776:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800177a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 800178a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001790:	4b33      	ldr	r3, [pc, #204]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 8001792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001796:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001798:	4b31      	ldr	r3, [pc, #196]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 800179a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ac:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80017b2:	482b      	ldr	r0, [pc, #172]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 80017b4:	f000 fc66 	bl	8002084 <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80017be:	f7ff ff8d 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a26      	ldr	r2, [pc, #152]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
 80017c8:	4a25      	ldr	r2, [pc, #148]	; (8001860 <HAL_TIM_Base_MspInit+0x120>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	2019      	movs	r0, #25
 80017d4:	f000 fc2c 	bl	8002030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017d8:	2019      	movs	r0, #25
 80017da:	f000 fc45 	bl	8002068 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	210f      	movs	r1, #15
 80017e2:	201a      	movs	r0, #26
 80017e4:	f000 fc24 	bl	8002030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017e8:	201a      	movs	r0, #26
 80017ea:	f000 fc3d 	bl	8002068 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80017ee:	e02e      	b.n	800184e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d10e      	bne.n	8001818 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_TIM_Base_MspInit+0x11c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_TIM_Base_MspInit+0x11c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_TIM_Base_MspInit+0x11c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
}
 8001816:	e01a      	b.n	800184e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a12      	ldr	r2, [pc, #72]	; (8001868 <HAL_TIM_Base_MspInit+0x128>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d115      	bne.n	800184e <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_TIM_Base_MspInit+0x11c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HAL_TIM_Base_MspInit+0x11c>)
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_TIM_Base_MspInit+0x11c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2105      	movs	r1, #5
 8001842:	2019      	movs	r0, #25
 8001844:	f000 fbf4 	bl	8002030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001848:	2019      	movs	r0, #25
 800184a:	f000 fc0d 	bl	8002068 <HAL_NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40010000 	.word	0x40010000
 800185c:	40023800 	.word	0x40023800
 8001860:	200004fc 	.word	0x200004fc
 8001864:	40026428 	.word	0x40026428
 8001868:	40014400 	.word	0x40014400

0800186c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	; 0x38
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a57      	ldr	r2, [pc, #348]	; (80019e8 <HAL_TIM_Encoder_MspInit+0x17c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d134      	bne.n	80018f8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
 8001892:	4b56      	ldr	r3, [pc, #344]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a55      	ldr	r2, [pc, #340]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MotorUp_enc2_Pin|MotorUp_enc1_Pin;
 80018c6:	23c0      	movs	r3, #192	; 0xc0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018d6:	2302      	movs	r3, #2
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	4619      	mov	r1, r3
 80018e0:	4843      	ldr	r0, [pc, #268]	; (80019f0 <HAL_TIM_Encoder_MspInit+0x184>)
 80018e2:	f000 feb9 	bl	8002658 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2105      	movs	r1, #5
 80018ea:	201d      	movs	r0, #29
 80018ec:	f000 fba0 	bl	8002030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f0:	201d      	movs	r0, #29
 80018f2:	f000 fbb9 	bl	8002068 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018f6:	e072      	b.n	80019de <HAL_TIM_Encoder_MspInit+0x172>
  else if(htim_encoder->Instance==TIM4)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a3d      	ldr	r2, [pc, #244]	; (80019f4 <HAL_TIM_Encoder_MspInit+0x188>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d134      	bne.n	800196c <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a38      	ldr	r2, [pc, #224]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	4b32      	ldr	r3, [pc, #200]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a31      	ldr	r2, [pc, #196]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MotorLeft_enc2_Pin|MotorLeft_enc1_Pin;
 800193a:	23c0      	movs	r3, #192	; 0xc0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800194a:	2302      	movs	r3, #2
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001952:	4619      	mov	r1, r3
 8001954:	4828      	ldr	r0, [pc, #160]	; (80019f8 <HAL_TIM_Encoder_MspInit+0x18c>)
 8001956:	f000 fe7f 	bl	8002658 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2105      	movs	r1, #5
 800195e:	201e      	movs	r0, #30
 8001960:	f000 fb66 	bl	8002030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001964:	201e      	movs	r0, #30
 8001966:	f000 fb7f 	bl	8002068 <HAL_NVIC_EnableIRQ>
}
 800196a:	e038      	b.n	80019de <HAL_TIM_Encoder_MspInit+0x172>
  else if(htim_encoder->Instance==TIM5)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a22      	ldr	r2, [pc, #136]	; (80019fc <HAL_TIM_Encoder_MspInit+0x190>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d133      	bne.n	80019de <HAL_TIM_Encoder_MspInit+0x172>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_TIM_Encoder_MspInit+0x180>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MotorRight_enc1_Pin|MotorRight_enc2_Pin;
 80019ae:	2303      	movs	r3, #3
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019be:	2302      	movs	r3, #2
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c6:	4619      	mov	r1, r3
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <HAL_TIM_Encoder_MspInit+0x194>)
 80019ca:	f000 fe45 	bl	8002658 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2105      	movs	r1, #5
 80019d2:	2032      	movs	r0, #50	; 0x32
 80019d4:	f000 fb2c 	bl	8002030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019d8:	2032      	movs	r0, #50	; 0x32
 80019da:	f000 fb45 	bl	8002068 <HAL_NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3738      	adds	r7, #56	; 0x38
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40000400 	.word	0x40000400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40000800 	.word	0x40000800
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40000c00 	.word	0x40000c00
 8001a00:	40020000 	.word	0x40020000

08001a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <HAL_TIM_MspPostInit+0xfc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d11f      	bne.n	8001a66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <HAL_TIM_MspPostInit+0x100>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a35      	ldr	r2, [pc, #212]	; (8001b04 <HAL_TIM_MspPostInit+0x100>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <HAL_TIM_MspPostInit+0x100>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MotorStretch_PWM_Pin|MotorLeft_PWM_Pin|MotorUp_PWM_Pin|MotorRight_PWM_Pin;
 8001a42:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	482a      	ldr	r0, [pc, #168]	; (8001b08 <HAL_TIM_MspPostInit+0x104>)
 8001a60:	f000 fdfa 	bl	8002658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001a64:	e048      	b.n	8001af8 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6e:	d11f      	bne.n	8001ab0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_TIM_MspPostInit+0x100>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_TIM_MspPostInit+0x100>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_TIM_MspPostInit+0x100>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4817      	ldr	r0, [pc, #92]	; (8001b08 <HAL_TIM_MspPostInit+0x104>)
 8001aaa:	f000 fdd5 	bl	8002658 <HAL_GPIO_Init>
}
 8001aae:	e023      	b.n	8001af8 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM10)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <HAL_TIM_MspPostInit+0x108>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d11e      	bne.n	8001af8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_TIM_MspPostInit+0x100>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <HAL_TIM_MspPostInit+0x100>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_TIM_MspPostInit+0x100>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <HAL_TIM_MspPostInit+0x10c>)
 8001af4:	f000 fdb0 	bl	8002658 <HAL_GPIO_Init>
}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	40014400 	.word	0x40014400
 8001b10:	40020400 	.word	0x40020400

08001b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <HAL_UART_MspInit+0xe0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d15a      	bne.n	8001bec <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_UART_MspInit+0xe4>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a2e      	ldr	r2, [pc, #184]	; (8001bf8 <HAL_UART_MspInit+0xe4>)
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_UART_MspInit+0xe4>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <HAL_UART_MspInit+0xe4>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <HAL_UART_MspInit+0xe4>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_UART_MspInit+0xe4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b6e:	230c      	movs	r3, #12
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	481c      	ldr	r0, [pc, #112]	; (8001bfc <HAL_UART_MspInit+0xe8>)
 8001b8a:	f000 fd65 	bl	8002658 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001b90:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <HAL_UART_MspInit+0xf0>)
 8001b92:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b9a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001bd2:	f000 fa57 	bl	8002084 <HAL_DMA_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001bdc:	f7ff fd7e 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
 8001be6:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <HAL_UART_MspInit+0xec>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40004400 	.word	0x40004400
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	200005a0 	.word	0x200005a0
 8001c04:	400260a0 	.word	0x400260a0

08001c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001c22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c26:	6453      	str	r3, [r2, #68]	; 0x44
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_InitTick+0xd0>)
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c34:	f107 020c 	add.w	r2, r7, #12
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f001 fb58 	bl	80032f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c44:	f001 fb42 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8001c48:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_InitTick+0xd4>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0c9b      	lsrs	r3, r3, #18
 8001c54:	3b01      	subs	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_InitTick+0xd8>)
 8001c5a:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <HAL_InitTick+0xdc>)
 8001c5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_InitTick+0xd8>)
 8001c60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c64:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_InitTick+0xd8>)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <HAL_InitTick+0xd8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_InitTick+0xd8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_InitTick+0xd8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001c7e:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <HAL_InitTick+0xd8>)
 8001c80:	f001 fb6a 	bl	8003358 <HAL_TIM_Base_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d11b      	bne.n	8001cca <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001c92:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <HAL_InitTick+0xd8>)
 8001c94:	f001 fbb0 	bl	80033f8 <HAL_TIM_Base_Start_IT>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d111      	bne.n	8001cca <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ca6:	201a      	movs	r0, #26
 8001ca8:	f000 f9de 	bl	8002068 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	d808      	bhi.n	8001cc4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	201a      	movs	r0, #26
 8001cb8:	f000 f9ba 	bl	8002030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_InitTick+0xe0>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e002      	b.n	8001cca <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3730      	adds	r7, #48	; 0x30
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	431bde83 	.word	0x431bde83
 8001ce0:	200006a0 	.word	0x200006a0
 8001ce4:	40014800 	.word	0x40014800
 8001ce8:	20000034 	.word	0x20000034

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <DMA1_Stream6_IRQHandler+0x10>)
 8001d1e:	f000 fa5f 	bl	80021e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200005a0 	.word	0x200005a0

08001d2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001d32:	f001 feaf 	bl	8003a94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001d36:	4803      	ldr	r0, [pc, #12]	; (8001d44 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001d38:	f001 feac 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000034c 	.word	0x2000034c
 8001d44:	200004b4 	.word	0x200004b4

08001d48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001d4e:	f001 fea1 	bl	8003a94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001d52:	4803      	ldr	r0, [pc, #12]	; (8001d60 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001d54:	f001 fe9e 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2000034c 	.word	0x2000034c
 8001d60:	200006a0 	.word	0x200006a0

08001d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <TIM3_IRQHandler+0x10>)
 8001d6a:	f001 fe93 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200003dc 	.word	0x200003dc

08001d78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM4_IRQHandler+0x10>)
 8001d7e:	f001 fe89 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000424 	.word	0x20000424

08001d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d94:	f000 fdfe 	bl	8002994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <TIM5_IRQHandler+0x10>)
 8001da2:	f001 fe77 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000046c 	.word	0x2000046c

08001db0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <DMA2_Stream1_IRQHandler+0x10>)
 8001db6:	f000 fa13 	bl	80021e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200004fc 	.word	0x200004fc

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dee:	490e      	ldr	r1, [pc, #56]	; (8001e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e04:	4c0b      	ldr	r4, [pc, #44]	; (8001e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e12:	f7ff ffd7 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f004 fb37 	bl	8006488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7fe fd71 	bl	8000900 <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001e2c:	08006678 	.word	0x08006678
  ldr r2, =_sbss
 8001e30:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001e34:	20004580 	.word	0x20004580

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_Init+0x40>)
 8001e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_Init+0x40>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_Init+0x40>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f8d8 	bl	800201a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	f7ff fecc 	bl	8001c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff fc3a 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000038 	.word	0x20000038
 8001ea4:	200006e8 	.word	0x200006e8

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200006e8 	.word	0x200006e8

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ff4c 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002042:	f7ff ff61 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002046:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	6978      	ldr	r0, [r7, #20]
 800204e:	f7ff ffb1 	bl	8001fb4 <NVIC_EncodePriority>
 8002052:	4602      	mov	r2, r0
 8002054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff80 	bl	8001f60 <__NVIC_SetPriority>
}
 8002060:	bf00      	nop
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff54 	bl	8001f24 <__NVIC_EnableIRQ>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ff0a 	bl	8001ea8 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e099      	b.n	80021d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c0:	e00f      	b.n	80020e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c2:	f7ff fef1 	bl	8001ea8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d908      	bls.n	80020e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2203      	movs	r2, #3
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e078      	b.n	80021d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e8      	bne.n	80020c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_DMA_Init+0x158>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b04      	cmp	r3, #4
 800213a:	d107      	bne.n	800214c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4313      	orrs	r3, r2
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f023 0307 	bic.w	r3, r3, #7
 8002162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2b04      	cmp	r3, #4
 8002174:	d117      	bne.n	80021a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f9e9 	bl	8002560 <DMA_CheckFifoParam>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021a2:	2301      	movs	r3, #1
 80021a4:	e016      	b.n	80021d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f9a0 	bl	80024f4 <DMA_CalcBaseAndBitshift>
 80021b4:	4603      	mov	r3, r0
 80021b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	223f      	movs	r2, #63	; 0x3f
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	f010803f 	.word	0xf010803f

080021e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021ec:	4b8e      	ldr	r3, [pc, #568]	; (8002428 <HAL_DMA_IRQHandler+0x248>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a8e      	ldr	r2, [pc, #568]	; (800242c <HAL_DMA_IRQHandler+0x24c>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a9b      	lsrs	r3, r3, #10
 80021f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	2208      	movs	r2, #8
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01a      	beq.n	800224c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	2208      	movs	r2, #8
 800223a:	409a      	lsls	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2201      	movs	r2, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	2201      	movs	r2, #1
 8002270:	409a      	lsls	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227a:	f043 0202 	orr.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	2204      	movs	r2, #4
 8002288:	409a      	lsls	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2204      	movs	r2, #4
 80022a6:	409a      	lsls	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2210      	movs	r2, #16
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d043      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03c      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2210      	movs	r2, #16
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d018      	beq.n	8002322 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d108      	bne.n	8002310 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d024      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	4798      	blx	r3
 800230e:	e01f      	b.n	8002350 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
 8002320:	e016      	b.n	8002350 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0208 	bic.w	r2, r2, #8
 800233e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	2220      	movs	r2, #32
 8002356:	409a      	lsls	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 808f 	beq.w	8002480 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8087 	beq.w	8002480 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	2220      	movs	r2, #32
 8002378:	409a      	lsls	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b05      	cmp	r3, #5
 8002388:	d136      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0216 	bic.w	r2, r2, #22
 8002398:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <HAL_DMA_IRQHandler+0x1da>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0208 	bic.w	r2, r2, #8
 80023c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	223f      	movs	r2, #63	; 0x3f
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d07e      	beq.n	80024ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
        }
        return;
 80023f6:	e079      	b.n	80024ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01d      	beq.n	8002442 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10d      	bne.n	8002430 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	2b00      	cmp	r3, #0
 800241a:	d031      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
 8002424:	e02c      	b.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
 8002426:	bf00      	nop
 8002428:	20000030 	.word	0x20000030
 800242c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d023      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	e01e      	b.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10f      	bne.n	8002470 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0210 	bic.w	r2, r2, #16
 800245e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	2b00      	cmp	r3, #0
 8002486:	d032      	beq.n	80024ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d022      	beq.n	80024da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2205      	movs	r2, #5
 8002498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d307      	bcc.n	80024c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f2      	bne.n	80024ac <HAL_DMA_IRQHandler+0x2cc>
 80024c6:	e000      	b.n	80024ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
 80024ea:	e000      	b.n	80024ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80024ec:	bf00      	nop
    }
  }
}
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3b10      	subs	r3, #16
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <DMA_CalcBaseAndBitshift+0x64>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800250e:	4a13      	ldr	r2, [pc, #76]	; (800255c <DMA_CalcBaseAndBitshift+0x68>)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d909      	bls.n	8002536 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	659a      	str	r2, [r3, #88]	; 0x58
 8002534:	e007      	b.n	8002546 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	aaaaaaab 	.word	0xaaaaaaab
 800255c:	08006660 	.word	0x08006660

08002560 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11f      	bne.n	80025ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d856      	bhi.n	800262e <DMA_CheckFifoParam+0xce>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <DMA_CheckFifoParam+0x28>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	08002599 	.word	0x08002599
 800258c:	080025ab 	.word	0x080025ab
 8002590:	08002599 	.word	0x08002599
 8002594:	0800262f 	.word	0x0800262f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d046      	beq.n	8002632 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a8:	e043      	b.n	8002632 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b2:	d140      	bne.n	8002636 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b8:	e03d      	b.n	8002636 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c2:	d121      	bne.n	8002608 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d837      	bhi.n	800263a <DMA_CheckFifoParam+0xda>
 80025ca:	a201      	add	r2, pc, #4	; (adr r2, 80025d0 <DMA_CheckFifoParam+0x70>)
 80025cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d0:	080025e1 	.word	0x080025e1
 80025d4:	080025e7 	.word	0x080025e7
 80025d8:	080025e1 	.word	0x080025e1
 80025dc:	080025f9 	.word	0x080025f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	e030      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d025      	beq.n	800263e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f6:	e022      	b.n	800263e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002600:	d11f      	bne.n	8002642 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002606:	e01c      	b.n	8002642 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d903      	bls.n	8002616 <DMA_CheckFifoParam+0xb6>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d003      	beq.n	800261c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002614:	e018      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      break;
 800261a:	e015      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00e      	beq.n	8002646 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      break;
 800262c:	e00b      	b.n	8002646 <DMA_CheckFifoParam+0xe6>
      break;
 800262e:	bf00      	nop
 8002630:	e00a      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e008      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 8002636:	bf00      	nop
 8002638:	e006      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
 800263c:	e004      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
 8002640:	e002      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;   
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
    }
  } 
  
  return status; 
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop

08002658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	e159      	b.n	8002928 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002674:	2201      	movs	r2, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	f040 8148 	bne.w	8002922 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d005      	beq.n	80026aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d130      	bne.n	800270c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e0:	2201      	movs	r2, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 0201 	and.w	r2, r3, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b03      	cmp	r3, #3
 8002716:	d017      	beq.n	8002748 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d123      	bne.n	800279c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	08da      	lsrs	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3208      	adds	r2, #8
 800275c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	220f      	movs	r2, #15
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	08da      	lsrs	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3208      	adds	r2, #8
 8002796:	69b9      	ldr	r1, [r7, #24]
 8002798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0203 	and.w	r2, r3, #3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a2 	beq.w	8002922 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b57      	ldr	r3, [pc, #348]	; (8002940 <HAL_GPIO_Init+0x2e8>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a56      	ldr	r2, [pc, #344]	; (8002940 <HAL_GPIO_Init+0x2e8>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b54      	ldr	r3, [pc, #336]	; (8002940 <HAL_GPIO_Init+0x2e8>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027fa:	4a52      	ldr	r2, [pc, #328]	; (8002944 <HAL_GPIO_Init+0x2ec>)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a49      	ldr	r2, [pc, #292]	; (8002948 <HAL_GPIO_Init+0x2f0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d019      	beq.n	800285a <HAL_GPIO_Init+0x202>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a48      	ldr	r2, [pc, #288]	; (800294c <HAL_GPIO_Init+0x2f4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_GPIO_Init+0x1fe>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a47      	ldr	r2, [pc, #284]	; (8002950 <HAL_GPIO_Init+0x2f8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00d      	beq.n	8002852 <HAL_GPIO_Init+0x1fa>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a46      	ldr	r2, [pc, #280]	; (8002954 <HAL_GPIO_Init+0x2fc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <HAL_GPIO_Init+0x1f6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a45      	ldr	r2, [pc, #276]	; (8002958 <HAL_GPIO_Init+0x300>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_GPIO_Init+0x1f2>
 8002846:	2304      	movs	r3, #4
 8002848:	e008      	b.n	800285c <HAL_GPIO_Init+0x204>
 800284a:	2307      	movs	r3, #7
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x204>
 800284e:	2303      	movs	r3, #3
 8002850:	e004      	b.n	800285c <HAL_GPIO_Init+0x204>
 8002852:	2302      	movs	r3, #2
 8002854:	e002      	b.n	800285c <HAL_GPIO_Init+0x204>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_GPIO_Init+0x204>
 800285a:	2300      	movs	r3, #0
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f002 0203 	and.w	r2, r2, #3
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	4093      	lsls	r3, r2
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800286c:	4935      	ldr	r1, [pc, #212]	; (8002944 <HAL_GPIO_Init+0x2ec>)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	3302      	adds	r3, #2
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_GPIO_Init+0x304>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289e:	4a2f      	ldr	r2, [pc, #188]	; (800295c <HAL_GPIO_Init+0x304>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a4:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_GPIO_Init+0x304>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c8:	4a24      	ldr	r2, [pc, #144]	; (800295c <HAL_GPIO_Init+0x304>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_GPIO_Init+0x304>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f2:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_GPIO_Init+0x304>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_GPIO_Init+0x304>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800291c:	4a0f      	ldr	r2, [pc, #60]	; (800295c <HAL_GPIO_Init+0x304>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3301      	adds	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	f67f aea2 	bls.w	8002674 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3724      	adds	r7, #36	; 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40013800 	.word	0x40013800
 8002948:	40020000 	.word	0x40020000
 800294c:	40020400 	.word	0x40020400
 8002950:	40020800 	.word	0x40020800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40013c00 	.word	0x40013c00

08002960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002970:	787b      	ldrb	r3, [r7, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800297c:	e003      	b.n	8002986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	041a      	lsls	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	619a      	str	r2, [r3, #24]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029aa:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fc54 	bl	8001260 <HAL_GPIO_EXTI_Callback>
  }
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e267      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d075      	beq.n	8002ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e2:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d00c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b85      	ldr	r3, [pc, #532]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d112      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fa:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	4b7e      	ldr	r3, [pc, #504]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d05b      	beq.n	8002acc <HAL_RCC_OscConfig+0x108>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d157      	bne.n	8002acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e242      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x74>
 8002a2a:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a75      	ldr	r2, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e01d      	b.n	8002a74 <HAL_RCC_OscConfig+0xb0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x98>
 8002a42:	4b70      	ldr	r3, [pc, #448]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6f      	ldr	r2, [pc, #444]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6c      	ldr	r2, [pc, #432]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_OscConfig+0xb0>
 8002a5c:	4b69      	ldr	r3, [pc, #420]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a68      	ldr	r2, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a65      	ldr	r2, [pc, #404]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fa14 	bl	8001ea8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a84:	f7ff fa10 	bl	8001ea8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e207      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0xc0>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff fa00 	bl	8001ea8 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aac:	f7ff f9fc 	bl	8001ea8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1f3      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0xe8>
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d063      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ada:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b44      	ldr	r3, [pc, #272]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x152>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e1c7      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4937      	ldr	r1, [pc, #220]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	e03a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b34:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_RCC_OscConfig+0x244>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7ff f9b5 	bl	8001ea8 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b42:	f7ff f9b1 	bl	8001ea8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e1a8      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4925      	ldr	r1, [pc, #148]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
 8002b74:	e015      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_OscConfig+0x244>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f994 	bl	8001ea8 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b84:	f7ff f990 	bl	8001ea8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e187      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d036      	beq.n	8002c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d016      	beq.n	8002be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_RCC_OscConfig+0x248>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7ff f974 	bl	8001ea8 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7ff f970 	bl	8001ea8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e167      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x200>
 8002be2:	e01b      	b.n	8002c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_OscConfig+0x248>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bea:	f7ff f95d 	bl	8001ea8 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	e00e      	b.n	8002c10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf2:	f7ff f959 	bl	8001ea8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d907      	bls.n	8002c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e150      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	42470000 	.word	0x42470000
 8002c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4b88      	ldr	r3, [pc, #544]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ea      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8097 	beq.w	8002d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b81      	ldr	r3, [pc, #516]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a7c      	ldr	r2, [pc, #496]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	4b7a      	ldr	r3, [pc, #488]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b77      	ldr	r3, [pc, #476]	; (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c66:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a73      	ldr	r2, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7ff f919 	bl	8001ea8 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7a:	f7ff f915 	bl	8001ea8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e10c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	4b6a      	ldr	r3, [pc, #424]	; (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x2ea>
 8002ca0:	4b64      	ldr	r3, [pc, #400]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a63      	ldr	r2, [pc, #396]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	e01c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x324>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x30c>
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a5e      	ldr	r2, [pc, #376]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a5b      	ldr	r2, [pc, #364]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x324>
 8002cd0:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a57      	ldr	r2, [pc, #348]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a54      	ldr	r2, [pc, #336]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d015      	beq.n	8002d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7ff f8da 	bl	8001ea8 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7ff f8d6 	bl	8001ea8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0cb      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ee      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x334>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7ff f8c4 	bl	8001ea8 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7ff f8c0 	bl	8001ea8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0b5      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ee      	bne.n	8002d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a1 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d62:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d05c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d141      	bne.n	8002dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <HAL_RCC_OscConfig+0x478>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff f894 	bl	8001ea8 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7ff f890 	bl	8001ea8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e087      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	041b      	lsls	r3, r3, #16
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	491b      	ldr	r1, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x478>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7ff f869 	bl	8001ea8 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dda:	f7ff f865 	bl	8001ea8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e05c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x416>
 8002df8:	e054      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_RCC_OscConfig+0x478>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7ff f852 	bl	8001ea8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e08:	f7ff f84e 	bl	8001ea8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e045      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x444>
 8002e26:	e03d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e038      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_RCC_OscConfig+0x4ec>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d028      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d121      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d11a      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d111      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cc      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d90c      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f20:	4b53      	ldr	r3, [pc, #332]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	494d      	ldr	r1, [pc, #308]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d044      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d119      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e067      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4934      	ldr	r1, [pc, #208]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe ff80 	bl	8001ea8 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fe ff7c 	bl	8001ea8 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e04f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d20c      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e032      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4916      	ldr	r1, [pc, #88]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	490e      	ldr	r1, [pc, #56]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303a:	f000 f821 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490a      	ldr	r1, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe fdd4 	bl	8001c08 <HAL_InitTick>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023c00 	.word	0x40023c00
 8003070:	40023800 	.word	0x40023800
 8003074:	08006648 	.word	0x08006648
 8003078:	20000030 	.word	0x20000030
 800307c:	20000034 	.word	0x20000034

08003080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003084:	b094      	sub	sp, #80	; 0x50
 8003086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	647b      	str	r3, [r7, #68]	; 0x44
 800308c:	2300      	movs	r3, #0
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003090:	2300      	movs	r3, #0
 8003092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003098:	4b79      	ldr	r3, [pc, #484]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d00d      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x40>
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	f200 80e1 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x1ec>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x3a>
 80030b2:	e0db      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b73      	ldr	r3, [pc, #460]	; (8003284 <HAL_RCC_GetSysClockFreq+0x204>)
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030b8:	e0db      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ba:	4b73      	ldr	r3, [pc, #460]	; (8003288 <HAL_RCC_GetSysClockFreq+0x208>)
 80030bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030be:	e0d8      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c0:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ca:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d6:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	099b      	lsrs	r3, r3, #6
 80030dc:	2200      	movs	r2, #0
 80030de:	63bb      	str	r3, [r7, #56]	; 0x38
 80030e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
 80030ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030f2:	4622      	mov	r2, r4
 80030f4:	462b      	mov	r3, r5
 80030f6:	f04f 0000 	mov.w	r0, #0
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	0159      	lsls	r1, r3, #5
 8003100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003104:	0150      	lsls	r0, r2, #5
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4621      	mov	r1, r4
 800310c:	1a51      	subs	r1, r2, r1
 800310e:	6139      	str	r1, [r7, #16]
 8003110:	4629      	mov	r1, r5
 8003112:	eb63 0301 	sbc.w	r3, r3, r1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003124:	4659      	mov	r1, fp
 8003126:	018b      	lsls	r3, r1, #6
 8003128:	4651      	mov	r1, sl
 800312a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800312e:	4651      	mov	r1, sl
 8003130:	018a      	lsls	r2, r1, #6
 8003132:	4651      	mov	r1, sl
 8003134:	ebb2 0801 	subs.w	r8, r2, r1
 8003138:	4659      	mov	r1, fp
 800313a:	eb63 0901 	sbc.w	r9, r3, r1
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800314e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003152:	4690      	mov	r8, r2
 8003154:	4699      	mov	r9, r3
 8003156:	4623      	mov	r3, r4
 8003158:	eb18 0303 	adds.w	r3, r8, r3
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	462b      	mov	r3, r5
 8003160:	eb49 0303 	adc.w	r3, r9, r3
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003172:	4629      	mov	r1, r5
 8003174:	024b      	lsls	r3, r1, #9
 8003176:	4621      	mov	r1, r4
 8003178:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800317c:	4621      	mov	r1, r4
 800317e:	024a      	lsls	r2, r1, #9
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003186:	2200      	movs	r2, #0
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
 800318a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800318c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003190:	f7fd f984 	bl	800049c <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4613      	mov	r3, r2
 800319a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800319c:	e058      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	4b38      	ldr	r3, [pc, #224]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	2200      	movs	r2, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	4611      	mov	r1, r2
 80031aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
 80031b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	f04f 0000 	mov.w	r0, #0
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	0159      	lsls	r1, r3, #5
 80031c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ca:	0150      	lsls	r0, r2, #5
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4641      	mov	r1, r8
 80031d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031d6:	4649      	mov	r1, r9
 80031d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031f0:	ebb2 040a 	subs.w	r4, r2, sl
 80031f4:	eb63 050b 	sbc.w	r5, r3, fp
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	00eb      	lsls	r3, r5, #3
 8003202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003206:	00e2      	lsls	r2, r4, #3
 8003208:	4614      	mov	r4, r2
 800320a:	461d      	mov	r5, r3
 800320c:	4643      	mov	r3, r8
 800320e:	18e3      	adds	r3, r4, r3
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	464b      	mov	r3, r9
 8003214:	eb45 0303 	adc.w	r3, r5, r3
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003226:	4629      	mov	r1, r5
 8003228:	028b      	lsls	r3, r1, #10
 800322a:	4621      	mov	r1, r4
 800322c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003230:	4621      	mov	r1, r4
 8003232:	028a      	lsls	r2, r1, #10
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323a:	2200      	movs	r2, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	61fa      	str	r2, [r7, #28]
 8003240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003244:	f7fd f92a 	bl	800049c <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	3301      	adds	r3, #1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800326a:	e002      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetSysClockFreq+0x204>)
 800326e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003274:	4618      	mov	r0, r3
 8003276:	3750      	adds	r7, #80	; 0x50
 8003278:	46bd      	mov	sp, r7
 800327a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	00f42400 	.word	0x00f42400
 8003288:	007a1200 	.word	0x007a1200

0800328c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000030 	.word	0x20000030

080032a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a8:	f7ff fff0 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0a9b      	lsrs	r3, r3, #10
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4903      	ldr	r1, [pc, #12]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	08006658 	.word	0x08006658

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d0:	f7ff ffdc 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	0b5b      	lsrs	r3, r3, #13
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	08006658 	.word	0x08006658

080032f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	220f      	movs	r2, #15
 8003302:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_RCC_GetClockConfig+0x60>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0207 	and.w	r2, r3, #7
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	40023c00 	.word	0x40023c00

08003358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e041      	b.n	80033ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe f9de 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 fe2c 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e044      	b.n	800349a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d013      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d010      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e007      	b.n	8003498 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40014000 	.word	0x40014000

080034bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e041      	b.n	8003552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f839 	bl	800355a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 fd7a 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_TIM_PWM_Start+0x24>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e022      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b04      	cmp	r3, #4
 8003598:	d109      	bne.n	80035ae <HAL_TIM_PWM_Start+0x3e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e015      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d109      	bne.n	80035c8 <HAL_TIM_PWM_Start+0x58>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e008      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e068      	b.n	80036b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x82>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f0:	e013      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start+0x92>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003600:	e00b      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d104      	bne.n	8003612 <HAL_TIM_PWM_Start+0xa2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003610:	e003      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 ff8c 	bl	8004540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_TIM_PWM_Start+0x14c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d107      	bne.n	8003642 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <HAL_TIM_PWM_Start+0x14c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d018      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003654:	d013      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_TIM_PWM_Start+0x150>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <HAL_TIM_PWM_Start+0x154>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <HAL_TIM_PWM_Start+0x158>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a14      	ldr	r2, [pc, #80]	; (80036cc <HAL_TIM_PWM_Start+0x15c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d111      	bne.n	80036a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d010      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	e007      	b.n	80036b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40014000 	.word	0x40014000

080036d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e097      	b.n	8003814 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7fe f8b7 	bl	800186c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003714:	f023 0307 	bic.w	r3, r3, #7
 8003718:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f000 fc65 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	4313      	orrs	r3, r2
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003770:	f023 030c 	bic.w	r3, r3, #12
 8003774:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800377c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	4313      	orrs	r3, r2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	011a      	lsls	r2, r3, #4
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	031b      	lsls	r3, r3, #12
 80037a0:	4313      	orrs	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	4313      	orrs	r3, r2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003834:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800383c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003844:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d110      	bne.n	800386e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003852:	7b7b      	ldrb	r3, [r7, #13]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e069      	b.n	8003930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386c:	e031      	b.n	80038d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d110      	bne.n	8003896 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003874:	7bbb      	ldrb	r3, [r7, #14]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d102      	bne.n	8003880 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800387a:	7b3b      	ldrb	r3, [r7, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e055      	b.n	8003930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003894:	e01d      	b.n	80038d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d108      	bne.n	80038ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800389c:	7bbb      	ldrb	r3, [r7, #14]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038a2:	7b7b      	ldrb	r3, [r7, #13]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038a8:	7b3b      	ldrb	r3, [r7, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e03e      	b.n	8003930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2202      	movs	r2, #2
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_TIM_Encoder_Start+0xc4>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d008      	beq.n	80038f0 <HAL_TIM_Encoder_Start+0xd4>
 80038de:	e00f      	b.n	8003900 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fe29 	bl	8004540 <TIM_CCxChannelCmd>
      break;
 80038ee:	e016      	b.n	800391e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2201      	movs	r2, #1
 80038f6:	2104      	movs	r1, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fe21 	bl	8004540 <TIM_CCxChannelCmd>
      break;
 80038fe:	e00e      	b.n	800391e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fe19 	bl	8004540 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2201      	movs	r2, #1
 8003914:	2104      	movs	r1, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fe12 	bl	8004540 <TIM_CCxChannelCmd>
      break;
 800391c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003948:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003950:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003958:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003960:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d110      	bne.n	800398a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d102      	bne.n	8003974 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800396e:	7b7b      	ldrb	r3, [r7, #13]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d001      	beq.n	8003978 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e089      	b.n	8003a8c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003988:	e031      	b.n	80039ee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d110      	bne.n	80039b2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003990:	7bbb      	ldrb	r3, [r7, #14]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d102      	bne.n	800399c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003996:	7b3b      	ldrb	r3, [r7, #12]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e075      	b.n	8003a8c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b0:	e01d      	b.n	80039ee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d108      	bne.n	80039ca <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039b8:	7bbb      	ldrb	r3, [r7, #14]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039be:	7b7b      	ldrb	r3, [r7, #13]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d102      	bne.n	80039ca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039c4:	7b3b      	ldrb	r3, [r7, #12]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d001      	beq.n	80039ce <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e05e      	b.n	8003a8c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_TIM_Encoder_Start_IT+0xc4>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d010      	beq.n	8003a1c <HAL_TIM_Encoder_Start_IT+0xe4>
 80039fa:	e01f      	b.n	8003a3c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fd9b 	bl	8004540 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0202 	orr.w	r2, r2, #2
 8003a18:	60da      	str	r2, [r3, #12]
      break;
 8003a1a:	e02e      	b.n	8003a7a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2201      	movs	r2, #1
 8003a22:	2104      	movs	r1, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fd8b 	bl	8004540 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0204 	orr.w	r2, r2, #4
 8003a38:	60da      	str	r2, [r3, #12]
      break;
 8003a3a:	e01e      	b.n	8003a7a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2201      	movs	r2, #1
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fd7b 	bl	8004540 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2104      	movs	r1, #4
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fd74 	bl	8004540 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0202 	orr.w	r2, r2, #2
 8003a66:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0204 	orr.w	r2, r2, #4
 8003a76:	60da      	str	r2, [r3, #12]
      break;
 8003a78:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0202 	mvn.w	r2, #2
 8003ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc fe78 	bl	80007cc <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa69 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fa70 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0204 	mvn.w	r2, #4
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fc fe4e 	bl	80007cc <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa3f 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fa46 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0208 	mvn.w	r2, #8
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fc fe24 	bl	80007cc <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa15 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fa1c 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0210 	mvn.w	r2, #16
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fc fdfa 	bl	80007cc <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f9eb 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f9f2 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0201 	mvn.w	r2, #1
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fd50 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fd6e 	bl	8004720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d10e      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f9b7 	bl	8003fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0220 	mvn.w	r2, #32
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fd38 	bl	800470c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e0ae      	b.n	8003e20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	f200 809f 	bhi.w	8003e10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d0d 	.word	0x08003d0d
 8003cdc:	08003e11 	.word	0x08003e11
 8003ce0:	08003e11 	.word	0x08003e11
 8003ce4:	08003e11 	.word	0x08003e11
 8003ce8:	08003d4d 	.word	0x08003d4d
 8003cec:	08003e11 	.word	0x08003e11
 8003cf0:	08003e11 	.word	0x08003e11
 8003cf4:	08003e11 	.word	0x08003e11
 8003cf8:	08003d8f 	.word	0x08003d8f
 8003cfc:	08003e11 	.word	0x08003e11
 8003d00:	08003e11 	.word	0x08003e11
 8003d04:	08003e11 	.word	0x08003e11
 8003d08:	08003dcf 	.word	0x08003dcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f9ee 	bl	80040f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0208 	orr.w	r2, r2, #8
 8003d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0204 	bic.w	r2, r2, #4
 8003d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6999      	ldr	r1, [r3, #24]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	619a      	str	r2, [r3, #24]
      break;
 8003d4a:	e064      	b.n	8003e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa34 	bl	80041c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6999      	ldr	r1, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	021a      	lsls	r2, r3, #8
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	619a      	str	r2, [r3, #24]
      break;
 8003d8c:	e043      	b.n	8003e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fa7f 	bl	8004298 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0208 	orr.w	r2, r2, #8
 8003da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0204 	bic.w	r2, r2, #4
 8003db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	61da      	str	r2, [r3, #28]
      break;
 8003dcc:	e023      	b.n	8003e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fac9 	bl	800436c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69d9      	ldr	r1, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	021a      	lsls	r2, r3, #8
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	61da      	str	r2, [r3, #28]
      break;
 8003e0e:	e002      	b.n	8003e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
      break;
 8003e14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_ConfigClockSource+0x1c>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0b4      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x186>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7c:	d03e      	beq.n	8003efc <HAL_TIM_ConfigClockSource+0xd4>
 8003e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e82:	f200 8087 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	f000 8086 	beq.w	8003f9a <HAL_TIM_ConfigClockSource+0x172>
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d87f      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b70      	cmp	r3, #112	; 0x70
 8003e96:	d01a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0xa6>
 8003e98:	2b70      	cmp	r3, #112	; 0x70
 8003e9a:	d87b      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b60      	cmp	r3, #96	; 0x60
 8003e9e:	d050      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x11a>
 8003ea0:	2b60      	cmp	r3, #96	; 0x60
 8003ea2:	d877      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b50      	cmp	r3, #80	; 0x50
 8003ea6:	d03c      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0xfa>
 8003ea8:	2b50      	cmp	r3, #80	; 0x50
 8003eaa:	d873      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d058      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x13a>
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	d86f      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b30      	cmp	r3, #48	; 0x30
 8003eb6:	d064      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x15a>
 8003eb8:	2b30      	cmp	r3, #48	; 0x30
 8003eba:	d86b      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d060      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d867      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d05c      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d05a      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	e062      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6899      	ldr	r1, [r3, #8]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f000 fb0f 	bl	8004500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	609a      	str	r2, [r3, #8]
      break;
 8003efa:	e04f      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	6899      	ldr	r1, [r3, #8]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f000 faf8 	bl	8004500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f1e:	609a      	str	r2, [r3, #8]
      break;
 8003f20:	e03c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 fa6c 	bl	800440c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2150      	movs	r1, #80	; 0x50
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fac5 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003f40:	e02c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 fa8b 	bl	800446a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2160      	movs	r1, #96	; 0x60
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fab5 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003f60:	e01c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f000 fa4c 	bl	800440c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2140      	movs	r1, #64	; 0x40
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 faa5 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003f80:	e00c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f000 fa9c 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003f92:	e003      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
      break;
 8003f98:	e000      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a34      	ldr	r2, [pc, #208]	; (80040d8 <TIM_Base_SetConfig+0xe4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00f      	beq.n	800402c <TIM_Base_SetConfig+0x38>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d00b      	beq.n	800402c <TIM_Base_SetConfig+0x38>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a31      	ldr	r2, [pc, #196]	; (80040dc <TIM_Base_SetConfig+0xe8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d007      	beq.n	800402c <TIM_Base_SetConfig+0x38>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a30      	ldr	r2, [pc, #192]	; (80040e0 <TIM_Base_SetConfig+0xec>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d003      	beq.n	800402c <TIM_Base_SetConfig+0x38>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <TIM_Base_SetConfig+0xf0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d108      	bne.n	800403e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <TIM_Base_SetConfig+0xe4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01b      	beq.n	800407e <TIM_Base_SetConfig+0x8a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404c:	d017      	beq.n	800407e <TIM_Base_SetConfig+0x8a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a22      	ldr	r2, [pc, #136]	; (80040dc <TIM_Base_SetConfig+0xe8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <TIM_Base_SetConfig+0x8a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <TIM_Base_SetConfig+0xec>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <TIM_Base_SetConfig+0x8a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <TIM_Base_SetConfig+0xf0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1f      	ldr	r2, [pc, #124]	; (80040e8 <TIM_Base_SetConfig+0xf4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <TIM_Base_SetConfig+0xf8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_Base_SetConfig+0x8a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <TIM_Base_SetConfig+0xfc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d108      	bne.n	8004090 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <TIM_Base_SetConfig+0xe4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d103      	bne.n	80040c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	615a      	str	r2, [r3, #20]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800

080040f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0201 	bic.w	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 0302 	bic.w	r3, r3, #2
 800413c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <TIM_OC1_SetConfig+0xc8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10c      	bne.n	800416a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0308 	bic.w	r3, r3, #8
 8004156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a13      	ldr	r2, [pc, #76]	; (80041bc <TIM_OC1_SetConfig+0xc8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d111      	bne.n	8004196 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	621a      	str	r2, [r3, #32]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40010000 	.word	0x40010000

080041c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0210 	bic.w	r2, r3, #16
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0320 	bic.w	r3, r3, #32
 800420a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <TIM_OC2_SetConfig+0xd4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d10d      	bne.n	800423c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <TIM_OC2_SetConfig+0xd4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d113      	bne.n	800426c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800424a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000

08004298 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <TIM_OC3_SetConfig+0xd0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10d      	bne.n	8004312 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a14      	ldr	r2, [pc, #80]	; (8004368 <TIM_OC3_SetConfig+0xd0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d113      	bne.n	8004342 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	621a      	str	r2, [r3, #32]
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	40010000 	.word	0x40010000

0800436c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	031b      	lsls	r3, r3, #12
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a10      	ldr	r2, [pc, #64]	; (8004408 <TIM_OC4_SetConfig+0x9c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d109      	bne.n	80043e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	019b      	lsls	r3, r3, #6
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000

0800440c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 030a 	bic.w	r3, r3, #10
 8004448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800446a:	b480      	push	{r7}
 800446c:	b087      	sub	sp, #28
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0210 	bic.w	r2, r3, #16
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	031b      	lsls	r3, r3, #12
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f043 0307 	orr.w	r3, r3, #7
 80044ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800451a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	021a      	lsls	r2, r3, #8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	431a      	orrs	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4313      	orrs	r3, r2
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2201      	movs	r2, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1a      	ldr	r2, [r3, #32]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	43db      	mvns	r3, r3
 8004562:	401a      	ands	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e050      	b.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d018      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d013      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a18      	ldr	r2, [pc, #96]	; (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a16      	ldr	r2, [pc, #88]	; (800465c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d009      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a15      	ldr	r2, [pc, #84]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10c      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40014000 	.word	0x40014000

08004668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004680:	2302      	movs	r3, #2
 8004682:	e03d      	b.n	8004700 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e03f      	b.n	80047c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fd f9da 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f939 	bl	80049f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800478c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800479c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b08a      	sub	sp, #40	; 0x28
 80047d2:	af02      	add	r7, sp, #8
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	f040 808c 	bne.w	8004908 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_UART_Receive+0x2e>
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e084      	b.n	800490a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_UART_Receive+0x40>
 800480a:	2302      	movs	r3, #2
 800480c:	e07d      	b.n	800490a <HAL_UART_Receive+0x13c>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2222      	movs	r2, #34	; 0x22
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800482a:	f7fd fb3d 	bl	8001ea8 <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	88fa      	ldrh	r2, [r7, #6]
 800483a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d108      	bne.n	8004858 <HAL_UART_Receive+0x8a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	e003      	b.n	8004860 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004868:	e043      	b.n	80048f2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	2120      	movs	r1, #32
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f84c 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e042      	b.n	800490a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10c      	bne.n	80048a4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	b29a      	uxth	r2, r3
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	3302      	adds	r3, #2
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e01f      	b.n	80048e4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ac:	d007      	beq.n	80048be <HAL_UART_Receive+0xf0>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <HAL_UART_Receive+0xfe>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e008      	b.n	80048de <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1b6      	bne.n	800486a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b090      	sub	sp, #64	; 0x40
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004922:	e050      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d04c      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x30>
 8004932:	f7fd fab9 	bl	8001ea8 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800493e:	429a      	cmp	r2, r3
 8004940:	d241      	bcs.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004962:	637a      	str	r2, [r7, #52]	; 0x34
 8004964:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3314      	adds	r3, #20
 800497c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	613b      	str	r3, [r7, #16]
   return(result);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	63bb      	str	r3, [r7, #56]	; 0x38
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004996:	623a      	str	r2, [r7, #32]
 8004998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	6a3a      	ldr	r2, [r7, #32]
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e00f      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d09f      	beq.n	8004924 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3740      	adds	r7, #64	; 0x40
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f4:	b0c0      	sub	sp, #256	; 0x100
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	68d9      	ldr	r1, [r3, #12]
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	ea40 0301 	orr.w	r3, r0, r1
 8004a18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a48:	f021 010c 	bic.w	r1, r1, #12
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a56:	430b      	orrs	r3, r1
 8004a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	6999      	ldr	r1, [r3, #24]
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	ea40 0301 	orr.w	r3, r0, r1
 8004a76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b8f      	ldr	r3, [pc, #572]	; (8004cbc <UART_SetConfig+0x2cc>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d005      	beq.n	8004a90 <UART_SetConfig+0xa0>
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b8d      	ldr	r3, [pc, #564]	; (8004cc0 <UART_SetConfig+0x2d0>)
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d104      	bne.n	8004a9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7fe fc1c 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8004a94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a98:	e003      	b.n	8004aa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a9a:	f7fe fc03 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 8004a9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	f040 810c 	bne.w	8004cc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004abe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	1891      	adds	r1, r2, r2
 8004ac8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004aca:	415b      	adcs	r3, r3
 8004acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ace:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	eb12 0801 	adds.w	r8, r2, r1
 8004ad8:	4629      	mov	r1, r5
 8004ada:	eb43 0901 	adc.w	r9, r3, r1
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af2:	4690      	mov	r8, r2
 8004af4:	4699      	mov	r9, r3
 8004af6:	4623      	mov	r3, r4
 8004af8:	eb18 0303 	adds.w	r3, r8, r3
 8004afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b00:	462b      	mov	r3, r5
 8004b02:	eb49 0303 	adc.w	r3, r9, r3
 8004b06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b1e:	460b      	mov	r3, r1
 8004b20:	18db      	adds	r3, r3, r3
 8004b22:	653b      	str	r3, [r7, #80]	; 0x50
 8004b24:	4613      	mov	r3, r2
 8004b26:	eb42 0303 	adc.w	r3, r2, r3
 8004b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b34:	f7fb fcb2 	bl	800049c <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4b61      	ldr	r3, [pc, #388]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	011c      	lsls	r4, r3, #4
 8004b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b60:	415b      	adcs	r3, r3
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b68:	4641      	mov	r1, r8
 8004b6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b6e:	4649      	mov	r1, r9
 8004b70:	eb43 0b01 	adc.w	fp, r3, r1
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b88:	4692      	mov	sl, r2
 8004b8a:	469b      	mov	fp, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b96:	464b      	mov	r3, r9
 8004b98:	eb4b 0303 	adc.w	r3, fp, r3
 8004b9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	18db      	adds	r3, r3, r3
 8004bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bba:	4613      	mov	r3, r2
 8004bbc:	eb42 0303 	adc.w	r3, r2, r3
 8004bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bca:	f7fb fc67 	bl	800049c <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2264      	movs	r2, #100	; 0x64
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	1acb      	subs	r3, r1, r3
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bea:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004bec:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bf8:	441c      	add	r4, r3
 8004bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	1891      	adds	r1, r2, r2
 8004c12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c14:	415b      	adcs	r3, r3
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	1851      	adds	r1, r2, r1
 8004c20:	6339      	str	r1, [r7, #48]	; 0x30
 8004c22:	4649      	mov	r1, r9
 8004c24:	414b      	adcs	r3, r1
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c34:	4659      	mov	r1, fp
 8004c36:	00cb      	lsls	r3, r1, #3
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3e:	4651      	mov	r1, sl
 8004c40:	00ca      	lsls	r2, r1, #3
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	189b      	adds	r3, r3, r2
 8004c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c50:	464b      	mov	r3, r9
 8004c52:	460a      	mov	r2, r1
 8004c54:	eb42 0303 	adc.w	r3, r2, r3
 8004c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c70:	460b      	mov	r3, r1
 8004c72:	18db      	adds	r3, r3, r3
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c76:	4613      	mov	r3, r2
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c86:	f7fb fc09 	bl	800049c <__aeabi_uldivmod>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004c90:	fba3 1302 	umull	r1, r3, r3, r2
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	2164      	movs	r1, #100	; 0x64
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	3332      	adds	r3, #50	; 0x32
 8004ca2:	4a08      	ldr	r2, [pc, #32]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	f003 0207 	and.w	r2, r3, #7
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4422      	add	r2, r4
 8004cb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cb8:	e106      	b.n	8004ec8 <UART_SetConfig+0x4d8>
 8004cba:	bf00      	nop
 8004cbc:	40011000 	.word	0x40011000
 8004cc0:	40011400 	.word	0x40011400
 8004cc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cda:	4642      	mov	r2, r8
 8004cdc:	464b      	mov	r3, r9
 8004cde:	1891      	adds	r1, r2, r2
 8004ce0:	6239      	str	r1, [r7, #32]
 8004ce2:	415b      	adcs	r3, r3
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cea:	4641      	mov	r1, r8
 8004cec:	1854      	adds	r4, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb43 0501 	adc.w	r5, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	00eb      	lsls	r3, r5, #3
 8004cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d02:	00e2      	lsls	r2, r4, #3
 8004d04:	4614      	mov	r4, r2
 8004d06:	461d      	mov	r5, r3
 8004d08:	4643      	mov	r3, r8
 8004d0a:	18e3      	adds	r3, r4, r3
 8004d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d10:	464b      	mov	r3, r9
 8004d12:	eb45 0303 	adc.w	r3, r5, r3
 8004d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d36:	4629      	mov	r1, r5
 8004d38:	008b      	lsls	r3, r1, #2
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d40:	4621      	mov	r1, r4
 8004d42:	008a      	lsls	r2, r1, #2
 8004d44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d48:	f7fb fba8 	bl	800049c <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4b60      	ldr	r3, [pc, #384]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004d52:	fba3 2302 	umull	r2, r3, r3, r2
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	011c      	lsls	r4, r3, #4
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	61b9      	str	r1, [r7, #24]
 8004d74:	415b      	adcs	r3, r3
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	1851      	adds	r1, r2, r1
 8004d80:	6139      	str	r1, [r7, #16]
 8004d82:	4649      	mov	r1, r9
 8004d84:	414b      	adcs	r3, r1
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d94:	4659      	mov	r1, fp
 8004d96:	00cb      	lsls	r3, r1, #3
 8004d98:	4651      	mov	r1, sl
 8004d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9e:	4651      	mov	r1, sl
 8004da0:	00ca      	lsls	r2, r1, #3
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	4642      	mov	r2, r8
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004db0:	464b      	mov	r3, r9
 8004db2:	460a      	mov	r2, r1
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	008b      	lsls	r3, r1, #2
 8004dd8:	4641      	mov	r1, r8
 8004dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dde:	4641      	mov	r1, r8
 8004de0:	008a      	lsls	r2, r1, #2
 8004de2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004de6:	f7fb fb59 	bl	800049c <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	4b38      	ldr	r3, [pc, #224]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004df2:	fba3 2301 	umull	r2, r3, r3, r1
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	2264      	movs	r2, #100	; 0x64
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	1acb      	subs	r3, r1, r3
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	3332      	adds	r3, #50	; 0x32
 8004e04:	4a33      	ldr	r2, [pc, #204]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e10:	441c      	add	r4, r3
 8004e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e16:	2200      	movs	r2, #0
 8004e18:	673b      	str	r3, [r7, #112]	; 0x70
 8004e1a:	677a      	str	r2, [r7, #116]	; 0x74
 8004e1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	1891      	adds	r1, r2, r2
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	415b      	adcs	r3, r3
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e30:	4641      	mov	r1, r8
 8004e32:	1851      	adds	r1, r2, r1
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	4649      	mov	r1, r9
 8004e38:	414b      	adcs	r3, r1
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e48:	4659      	mov	r1, fp
 8004e4a:	00cb      	lsls	r3, r1, #3
 8004e4c:	4651      	mov	r1, sl
 8004e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e52:	4651      	mov	r1, sl
 8004e54:	00ca      	lsls	r2, r1, #3
 8004e56:	4610      	mov	r0, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	189b      	adds	r3, r3, r2
 8004e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e62:	464b      	mov	r3, r9
 8004e64:	460a      	mov	r2, r1
 8004e66:	eb42 0303 	adc.w	r3, r2, r3
 8004e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	663b      	str	r3, [r7, #96]	; 0x60
 8004e76:	667a      	str	r2, [r7, #100]	; 0x64
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e84:	4649      	mov	r1, r9
 8004e86:	008b      	lsls	r3, r1, #2
 8004e88:	4641      	mov	r1, r8
 8004e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8e:	4641      	mov	r1, r8
 8004e90:	008a      	lsls	r2, r1, #2
 8004e92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e96:	f7fb fb01 	bl	800049c <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	2164      	movs	r1, #100	; 0x64
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	3332      	adds	r3, #50	; 0x32
 8004eb2:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	f003 020f 	and.w	r2, r3, #15
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4422      	add	r2, r4
 8004ec6:	609a      	str	r2, [r3, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed4:	51eb851f 	.word	0x51eb851f

08004ed8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eea:	2b84      	cmp	r3, #132	; 0x84
 8004eec:	d005      	beq.n	8004efa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004eee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3303      	adds	r3, #3
 8004ef8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004efa:	68fb      	ldr	r3, [r7, #12]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f0c:	f000 faf6 	bl	80054fc <vTaskStartScheduler>
  
  return osOK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f18:	b089      	sub	sp, #36	; 0x24
 8004f1a:	af04      	add	r7, sp, #16
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d020      	beq.n	8004f6a <osThreadCreate+0x54>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01c      	beq.n	8004f6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685c      	ldr	r4, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691e      	ldr	r6, [r3, #16]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff ffc8 	bl	8004ed8 <makeFreeRtosPriority>
 8004f48:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f52:	9202      	str	r2, [sp, #8]
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	9100      	str	r1, [sp, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	4632      	mov	r2, r6
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f8ed 	bl	800513e <xTaskCreateStatic>
 8004f64:	4603      	mov	r3, r0
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e01c      	b.n	8004fa4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685c      	ldr	r4, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f76:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff ffaa 	bl	8004ed8 <makeFreeRtosPriority>
 8004f84:	4602      	mov	r2, r0
 8004f86:	f107 030c 	add.w	r3, r7, #12
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	9200      	str	r2, [sp, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	4632      	mov	r2, r6
 8004f92:	4629      	mov	r1, r5
 8004f94:	4620      	mov	r0, r4
 8004f96:	f000 f92f 	bl	80051f8 <xTaskCreate>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d001      	beq.n	8004fa4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e000      	b.n	8004fa6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <osDelay+0x16>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	e000      	b.n	8004fc6 <osDelay+0x18>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fa64 	bl	8005494 <vTaskDelay>
  
  return osOK;
 8004fcc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f103 0208 	add.w	r2, r3, #8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f04f 32ff 	mov.w	r2, #4294967295
 8004fee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f103 0208 	add.w	r2, r3, #8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f103 0208 	add.w	r2, r3, #8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	601a      	str	r2, [r3, #0]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d103      	bne.n	8005098 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e00c      	b.n	80050b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3308      	adds	r3, #8
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e002      	b.n	80050a6 <vListInsert+0x2e>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d2f6      	bcs.n	80050a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6892      	ldr	r2, [r2, #8]
 8005100:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6852      	ldr	r2, [r2, #4]
 800510a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	429a      	cmp	r2, r3
 8005114:	d103      	bne.n	800511e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	1e5a      	subs	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800513e:	b580      	push	{r7, lr}
 8005140:	b08e      	sub	sp, #56	; 0x38
 8005142:	af04      	add	r7, sp, #16
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800514c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <xTaskCreateStatic+0x46>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	61fb      	str	r3, [r7, #28]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005184:	23a0      	movs	r3, #160	; 0xa0
 8005186:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2ba0      	cmp	r3, #160	; 0xa0
 800518c:	d00a      	beq.n	80051a4 <xTaskCreateStatic+0x66>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	61bb      	str	r3, [r7, #24]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01e      	beq.n	80051ea <xTaskCreateStatic+0xac>
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01b      	beq.n	80051ea <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051c4:	2300      	movs	r3, #0
 80051c6:	9303      	str	r3, [sp, #12]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	9302      	str	r3, [sp, #8]
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f851 	bl	8005284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051e4:	f000 f8ec 	bl	80053c0 <prvAddNewTaskToReadyList>
 80051e8:	e001      	b.n	80051ee <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051ee:	697b      	ldr	r3, [r7, #20]
	}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3728      	adds	r7, #40	; 0x28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	; 0x30
 80051fc:	af04      	add	r7, sp, #16
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fef3 	bl	8005ff8 <pvPortMalloc>
 8005212:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00e      	beq.n	8005238 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800521a:	20a0      	movs	r0, #160	; 0xa0
 800521c:	f000 feec 	bl	8005ff8 <pvPortMalloc>
 8005220:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
 800522e:	e005      	b.n	800523c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	f000 ffad 	bl	8006190 <vPortFree>
 8005236:	e001      	b.n	800523c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d017      	beq.n	8005272 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	2300      	movs	r3, #0
 800524e:	9303      	str	r3, [sp, #12]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	9302      	str	r3, [sp, #8]
 8005254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f80f 	bl	8005284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005266:	69f8      	ldr	r0, [r7, #28]
 8005268:	f000 f8aa 	bl	80053c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800526c:	2301      	movs	r3, #1
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	e002      	b.n	8005278 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005272:	f04f 33ff 	mov.w	r3, #4294967295
 8005276:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005278:	69bb      	ldr	r3, [r7, #24]
	}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800529c:	3b01      	subs	r3, #1
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f023 0307 	bic.w	r3, r3, #7
 80052aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <prvInitialiseNewTask+0x48>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	617b      	str	r3, [r7, #20]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01f      	beq.n	8005312 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	e012      	b.n	80052fe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	7819      	ldrb	r1, [r3, #0]
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	3334      	adds	r3, #52	; 0x34
 80052e8:	460a      	mov	r2, r1
 80052ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d006      	beq.n	8005306 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	3301      	adds	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b0f      	cmp	r3, #15
 8005302:	d9e9      	bls.n	80052d8 <prvInitialiseNewTask+0x54>
 8005304:	e000      	b.n	8005308 <prvInitialiseNewTask+0x84>
			{
				break;
 8005306:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005310:	e003      	b.n	800531a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	2b06      	cmp	r3, #6
 800531e:	d901      	bls.n	8005324 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005320:	2306      	movs	r3, #6
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005328:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800532e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	2200      	movs	r2, #0
 8005334:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	3304      	adds	r3, #4
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fe6b 	bl	8005016 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	3318      	adds	r3, #24
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fe66 	bl	8005016 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	f1c3 0207 	rsb	r2, r3, #7
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	2200      	movs	r2, #0
 800536c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	334c      	adds	r3, #76	; 0x4c
 8005374:	224c      	movs	r2, #76	; 0x4c
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f827 	bl	80063cc <memset>
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	4a0c      	ldr	r2, [pc, #48]	; (80053b4 <prvInitialiseNewTask+0x130>)
 8005382:	651a      	str	r2, [r3, #80]	; 0x50
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <prvInitialiseNewTask+0x134>)
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <prvInitialiseNewTask+0x138>)
 800538e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	69b8      	ldr	r0, [r7, #24]
 8005396:	f000 fc1f 	bl	8005bd8 <pxPortInitialiseStack>
 800539a:	4602      	mov	r2, r0
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ac:	bf00      	nop
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20004440 	.word	0x20004440
 80053b8:	200044a8 	.word	0x200044a8
 80053bc:	20004510 	.word	0x20004510

080053c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053c8:	f000 fd34 	bl	8005e34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053cc:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <prvAddNewTaskToReadyList+0xb8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	4a29      	ldr	r2, [pc, #164]	; (8005478 <prvAddNewTaskToReadyList+0xb8>)
 80053d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053d6:	4b29      	ldr	r3, [pc, #164]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053de:	4a27      	ldr	r2, [pc, #156]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053e4:	4b24      	ldr	r3, [pc, #144]	; (8005478 <prvAddNewTaskToReadyList+0xb8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d110      	bne.n	800540e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053ec:	f000 facc 	bl	8005988 <prvInitialiseTaskLists>
 80053f0:	e00d      	b.n	800540e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053f2:	4b23      	ldr	r3, [pc, #140]	; (8005480 <prvAddNewTaskToReadyList+0xc0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	429a      	cmp	r2, r3
 8005406:	d802      	bhi.n	800540e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005408:	4a1c      	ldr	r2, [pc, #112]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800540e:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <prvAddNewTaskToReadyList+0xc4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3301      	adds	r3, #1
 8005414:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <prvAddNewTaskToReadyList+0xc4>)
 8005416:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	2201      	movs	r2, #1
 800541e:	409a      	lsls	r2, r3
 8005420:	4b19      	ldr	r3, [pc, #100]	; (8005488 <prvAddNewTaskToReadyList+0xc8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4313      	orrs	r3, r2
 8005426:	4a18      	ldr	r2, [pc, #96]	; (8005488 <prvAddNewTaskToReadyList+0xc8>)
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4a15      	ldr	r2, [pc, #84]	; (800548c <prvAddNewTaskToReadyList+0xcc>)
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3304      	adds	r3, #4
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7ff fdf5 	bl	8005030 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005446:	f000 fd25 	bl	8005e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800544a:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <prvAddNewTaskToReadyList+0xc0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00e      	beq.n	8005470 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	429a      	cmp	r2, r3
 800545e:	d207      	bcs.n	8005470 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <prvAddNewTaskToReadyList+0xd0>)
 8005462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	200007ec 	.word	0x200007ec
 800547c:	200006ec 	.word	0x200006ec
 8005480:	200007f8 	.word	0x200007f8
 8005484:	20000808 	.word	0x20000808
 8005488:	200007f4 	.word	0x200007f4
 800548c:	200006f0 	.word	0x200006f0
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d017      	beq.n	80054d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <vTaskDelay+0x60>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <vTaskDelay+0x30>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60bb      	str	r3, [r7, #8]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054c4:	f000 f884 	bl	80055d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054c8:	2100      	movs	r1, #0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fb1e 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054d0:	f000 f88c 	bl	80055ec <xTaskResumeAll>
 80054d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <vTaskDelay+0x64>)
 80054de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20000814 	.word	0x20000814
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800550a:	463a      	mov	r2, r7
 800550c:	1d39      	adds	r1, r7, #4
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f7fb f940 	bl	8000798 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	9202      	str	r2, [sp, #8]
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2300      	movs	r3, #0
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	460a      	mov	r2, r1
 800552a:	4921      	ldr	r1, [pc, #132]	; (80055b0 <vTaskStartScheduler+0xb4>)
 800552c:	4821      	ldr	r0, [pc, #132]	; (80055b4 <vTaskStartScheduler+0xb8>)
 800552e:	f7ff fe06 	bl	800513e <xTaskCreateStatic>
 8005532:	4603      	mov	r3, r0
 8005534:	4a20      	ldr	r2, [pc, #128]	; (80055b8 <vTaskStartScheduler+0xbc>)
 8005536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005538:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <vTaskStartScheduler+0xbc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005540:	2301      	movs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e001      	b.n	800554a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d11b      	bne.n	8005588 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	613b      	str	r3, [r7, #16]
}
 8005562:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005564:	4b15      	ldr	r3, [pc, #84]	; (80055bc <vTaskStartScheduler+0xc0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	334c      	adds	r3, #76	; 0x4c
 800556a:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <vTaskStartScheduler+0xc4>)
 800556c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800556e:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <vTaskStartScheduler+0xc8>)
 8005570:	f04f 32ff 	mov.w	r2, #4294967295
 8005574:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <vTaskStartScheduler+0xcc>)
 8005578:	2201      	movs	r2, #1
 800557a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800557c:	4b13      	ldr	r3, [pc, #76]	; (80055cc <vTaskStartScheduler+0xd0>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005582:	f000 fbb5 	bl	8005cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005586:	e00e      	b.n	80055a6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d10a      	bne.n	80055a6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <vTaskStartScheduler+0xa8>
}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	08006640 	.word	0x08006640
 80055b4:	08005959 	.word	0x08005959
 80055b8:	20000810 	.word	0x20000810
 80055bc:	200006ec 	.word	0x200006ec
 80055c0:	2000008c 	.word	0x2000008c
 80055c4:	2000080c 	.word	0x2000080c
 80055c8:	200007f8 	.word	0x200007f8
 80055cc:	200007f0 	.word	0x200007f0

080055d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <vTaskSuspendAll+0x18>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a03      	ldr	r2, [pc, #12]	; (80055e8 <vTaskSuspendAll+0x18>)
 80055dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	20000814 	.word	0x20000814

080055ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055fa:	4b41      	ldr	r3, [pc, #260]	; (8005700 <xTaskResumeAll+0x114>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <xTaskResumeAll+0x2c>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	603b      	str	r3, [r7, #0]
}
 8005614:	bf00      	nop
 8005616:	e7fe      	b.n	8005616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005618:	f000 fc0c 	bl	8005e34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800561c:	4b38      	ldr	r3, [pc, #224]	; (8005700 <xTaskResumeAll+0x114>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3b01      	subs	r3, #1
 8005622:	4a37      	ldr	r2, [pc, #220]	; (8005700 <xTaskResumeAll+0x114>)
 8005624:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005626:	4b36      	ldr	r3, [pc, #216]	; (8005700 <xTaskResumeAll+0x114>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d161      	bne.n	80056f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800562e:	4b35      	ldr	r3, [pc, #212]	; (8005704 <xTaskResumeAll+0x118>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d05d      	beq.n	80056f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005636:	e02e      	b.n	8005696 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005638:	4b33      	ldr	r3, [pc, #204]	; (8005708 <xTaskResumeAll+0x11c>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3318      	adds	r3, #24
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff fd50 	bl	80050ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3304      	adds	r3, #4
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fd4b 	bl	80050ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	2201      	movs	r2, #1
 800565a:	409a      	lsls	r2, r3
 800565c:	4b2b      	ldr	r3, [pc, #172]	; (800570c <xTaskResumeAll+0x120>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4313      	orrs	r3, r2
 8005662:	4a2a      	ldr	r2, [pc, #168]	; (800570c <xTaskResumeAll+0x120>)
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4a27      	ldr	r2, [pc, #156]	; (8005710 <xTaskResumeAll+0x124>)
 8005674:	441a      	add	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7ff fcd7 	bl	8005030 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005686:	4b23      	ldr	r3, [pc, #140]	; (8005714 <xTaskResumeAll+0x128>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	429a      	cmp	r2, r3
 800568e:	d302      	bcc.n	8005696 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005690:	4b21      	ldr	r3, [pc, #132]	; (8005718 <xTaskResumeAll+0x12c>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005696:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <xTaskResumeAll+0x11c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1cc      	bne.n	8005638 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056a4:	f000 fa12 	bl	8005acc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056a8:	4b1c      	ldr	r3, [pc, #112]	; (800571c <xTaskResumeAll+0x130>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d010      	beq.n	80056d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056b4:	f000 f836 	bl	8005724 <xTaskIncrementTick>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056be:	4b16      	ldr	r3, [pc, #88]	; (8005718 <xTaskResumeAll+0x12c>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f1      	bne.n	80056b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <xTaskResumeAll+0x130>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <xTaskResumeAll+0x12c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056de:	2301      	movs	r3, #1
 80056e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <xTaskResumeAll+0x134>)
 80056e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056f2:	f000 fbcf 	bl	8005e94 <vPortExitCritical>

	return xAlreadyYielded;
 80056f6:	68bb      	ldr	r3, [r7, #8]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20000814 	.word	0x20000814
 8005704:	200007ec 	.word	0x200007ec
 8005708:	200007ac 	.word	0x200007ac
 800570c:	200007f4 	.word	0x200007f4
 8005710:	200006f0 	.word	0x200006f0
 8005714:	200006ec 	.word	0x200006ec
 8005718:	20000800 	.word	0x20000800
 800571c:	200007fc 	.word	0x200007fc
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800572e:	4b4e      	ldr	r3, [pc, #312]	; (8005868 <xTaskIncrementTick+0x144>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 808e 	bne.w	8005854 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005738:	4b4c      	ldr	r3, [pc, #304]	; (800586c <xTaskIncrementTick+0x148>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005740:	4a4a      	ldr	r2, [pc, #296]	; (800586c <xTaskIncrementTick+0x148>)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d120      	bne.n	800578e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800574c:	4b48      	ldr	r3, [pc, #288]	; (8005870 <xTaskIncrementTick+0x14c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <xTaskIncrementTick+0x48>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	603b      	str	r3, [r7, #0]
}
 8005768:	bf00      	nop
 800576a:	e7fe      	b.n	800576a <xTaskIncrementTick+0x46>
 800576c:	4b40      	ldr	r3, [pc, #256]	; (8005870 <xTaskIncrementTick+0x14c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	4b40      	ldr	r3, [pc, #256]	; (8005874 <xTaskIncrementTick+0x150>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a3e      	ldr	r2, [pc, #248]	; (8005870 <xTaskIncrementTick+0x14c>)
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	4a3e      	ldr	r2, [pc, #248]	; (8005874 <xTaskIncrementTick+0x150>)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <xTaskIncrementTick+0x154>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3301      	adds	r3, #1
 8005786:	4a3c      	ldr	r2, [pc, #240]	; (8005878 <xTaskIncrementTick+0x154>)
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	f000 f99f 	bl	8005acc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800578e:	4b3b      	ldr	r3, [pc, #236]	; (800587c <xTaskIncrementTick+0x158>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	429a      	cmp	r2, r3
 8005796:	d348      	bcc.n	800582a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005798:	4b35      	ldr	r3, [pc, #212]	; (8005870 <xTaskIncrementTick+0x14c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a2:	4b36      	ldr	r3, [pc, #216]	; (800587c <xTaskIncrementTick+0x158>)
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295
 80057a8:	601a      	str	r2, [r3, #0]
					break;
 80057aa:	e03e      	b.n	800582a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ac:	4b30      	ldr	r3, [pc, #192]	; (8005870 <xTaskIncrementTick+0x14c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d203      	bcs.n	80057cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057c4:	4a2d      	ldr	r2, [pc, #180]	; (800587c <xTaskIncrementTick+0x158>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057ca:	e02e      	b.n	800582a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fc8a 	bl	80050ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	3318      	adds	r3, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fc81 	bl	80050ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	2201      	movs	r2, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	4b23      	ldr	r3, [pc, #140]	; (8005880 <xTaskIncrementTick+0x15c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	4a22      	ldr	r2, [pc, #136]	; (8005880 <xTaskIncrementTick+0x15c>)
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <xTaskIncrementTick+0x160>)
 8005808:	441a      	add	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7ff fc0d 	bl	8005030 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581a:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <xTaskIncrementTick+0x164>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	429a      	cmp	r2, r3
 8005822:	d3b9      	bcc.n	8005798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005828:	e7b6      	b.n	8005798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800582a:	4b17      	ldr	r3, [pc, #92]	; (8005888 <xTaskIncrementTick+0x164>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	4914      	ldr	r1, [pc, #80]	; (8005884 <xTaskIncrementTick+0x160>)
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d901      	bls.n	8005846 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005842:	2301      	movs	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005846:	4b11      	ldr	r3, [pc, #68]	; (800588c <xTaskIncrementTick+0x168>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800584e:	2301      	movs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e004      	b.n	800585e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005854:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <xTaskIncrementTick+0x16c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <xTaskIncrementTick+0x16c>)
 800585c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800585e:	697b      	ldr	r3, [r7, #20]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000814 	.word	0x20000814
 800586c:	200007f0 	.word	0x200007f0
 8005870:	200007a4 	.word	0x200007a4
 8005874:	200007a8 	.word	0x200007a8
 8005878:	20000804 	.word	0x20000804
 800587c:	2000080c 	.word	0x2000080c
 8005880:	200007f4 	.word	0x200007f4
 8005884:	200006f0 	.word	0x200006f0
 8005888:	200006ec 	.word	0x200006ec
 800588c:	20000800 	.word	0x20000800
 8005890:	200007fc 	.word	0x200007fc

08005894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800589a:	4b29      	ldr	r3, [pc, #164]	; (8005940 <vTaskSwitchContext+0xac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058a2:	4b28      	ldr	r3, [pc, #160]	; (8005944 <vTaskSwitchContext+0xb0>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058a8:	e044      	b.n	8005934 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80058aa:	4b26      	ldr	r3, [pc, #152]	; (8005944 <vTaskSwitchContext+0xb0>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b0:	4b25      	ldr	r3, [pc, #148]	; (8005948 <vTaskSwitchContext+0xb4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	fab3 f383 	clz	r3, r3
 80058bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	f1c3 031f 	rsb	r3, r3, #31
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	4921      	ldr	r1, [pc, #132]	; (800594c <vTaskSwitchContext+0xb8>)
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	607b      	str	r3, [r7, #4]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <vTaskSwitchContext+0x5a>
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4a14      	ldr	r2, [pc, #80]	; (800594c <vTaskSwitchContext+0xb8>)
 80058fc:	4413      	add	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	3308      	adds	r3, #8
 8005912:	429a      	cmp	r2, r3
 8005914:	d104      	bne.n	8005920 <vTaskSwitchContext+0x8c>
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <vTaskSwitchContext+0xbc>)
 8005928:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <vTaskSwitchContext+0xbc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	334c      	adds	r3, #76	; 0x4c
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <vTaskSwitchContext+0xc0>)
 8005932:	6013      	str	r3, [r2, #0]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	20000814 	.word	0x20000814
 8005944:	20000800 	.word	0x20000800
 8005948:	200007f4 	.word	0x200007f4
 800594c:	200006f0 	.word	0x200006f0
 8005950:	200006ec 	.word	0x200006ec
 8005954:	2000008c 	.word	0x2000008c

08005958 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005960:	f000 f852 	bl	8005a08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005964:	4b06      	ldr	r3, [pc, #24]	; (8005980 <prvIdleTask+0x28>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d9f9      	bls.n	8005960 <prvIdleTask+0x8>
			{
				taskYIELD();
 800596c:	4b05      	ldr	r3, [pc, #20]	; (8005984 <prvIdleTask+0x2c>)
 800596e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800597c:	e7f0      	b.n	8005960 <prvIdleTask+0x8>
 800597e:	bf00      	nop
 8005980:	200006f0 	.word	0x200006f0
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	e00c      	b.n	80059ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <prvInitialiseTaskLists+0x60>)
 80059a0:	4413      	add	r3, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fb17 	bl	8004fd6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3301      	adds	r3, #1
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b06      	cmp	r3, #6
 80059b2:	d9ef      	bls.n	8005994 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059b4:	480d      	ldr	r0, [pc, #52]	; (80059ec <prvInitialiseTaskLists+0x64>)
 80059b6:	f7ff fb0e 	bl	8004fd6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ba:	480d      	ldr	r0, [pc, #52]	; (80059f0 <prvInitialiseTaskLists+0x68>)
 80059bc:	f7ff fb0b 	bl	8004fd6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059c0:	480c      	ldr	r0, [pc, #48]	; (80059f4 <prvInitialiseTaskLists+0x6c>)
 80059c2:	f7ff fb08 	bl	8004fd6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059c6:	480c      	ldr	r0, [pc, #48]	; (80059f8 <prvInitialiseTaskLists+0x70>)
 80059c8:	f7ff fb05 	bl	8004fd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059cc:	480b      	ldr	r0, [pc, #44]	; (80059fc <prvInitialiseTaskLists+0x74>)
 80059ce:	f7ff fb02 	bl	8004fd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059d2:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <prvInitialiseTaskLists+0x78>)
 80059d4:	4a05      	ldr	r2, [pc, #20]	; (80059ec <prvInitialiseTaskLists+0x64>)
 80059d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <prvInitialiseTaskLists+0x7c>)
 80059da:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <prvInitialiseTaskLists+0x68>)
 80059dc:	601a      	str	r2, [r3, #0]
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200006f0 	.word	0x200006f0
 80059ec:	2000077c 	.word	0x2000077c
 80059f0:	20000790 	.word	0x20000790
 80059f4:	200007ac 	.word	0x200007ac
 80059f8:	200007c0 	.word	0x200007c0
 80059fc:	200007d8 	.word	0x200007d8
 8005a00:	200007a4 	.word	0x200007a4
 8005a04:	200007a8 	.word	0x200007a8

08005a08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a0e:	e019      	b.n	8005a44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a10:	f000 fa10 	bl	8005e34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <prvCheckTasksWaitingTermination+0x50>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fb62 	bl	80050ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a26:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <prvCheckTasksWaitingTermination+0x54>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	4a0b      	ldr	r2, [pc, #44]	; (8005a5c <prvCheckTasksWaitingTermination+0x54>)
 8005a2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <prvCheckTasksWaitingTermination+0x58>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <prvCheckTasksWaitingTermination+0x58>)
 8005a38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a3a:	f000 fa2b 	bl	8005e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f810 	bl	8005a64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <prvCheckTasksWaitingTermination+0x58>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e1      	bne.n	8005a10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	200007c0 	.word	0x200007c0
 8005a5c:	200007ec 	.word	0x200007ec
 8005a60:	200007d4 	.word	0x200007d4

08005a64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	334c      	adds	r3, #76	; 0x4c
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fcb3 	bl	80063dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d108      	bne.n	8005a92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fb83 	bl	8006190 <vPortFree>
				vPortFree( pxTCB );
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fb80 	bl	8006190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a90:	e018      	b.n	8005ac4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d103      	bne.n	8005aa4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fb77 	bl	8006190 <vPortFree>
	}
 8005aa2:	e00f      	b.n	8005ac4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d00a      	beq.n	8005ac4 <prvDeleteTCB+0x60>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60fb      	str	r3, [r7, #12]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <prvDeleteTCB+0x5e>
	}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <prvResetNextTaskUnblockTime+0x38>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <prvResetNextTaskUnblockTime+0x3c>)
 8005ade:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ae4:	e008      	b.n	8005af8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae6:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <prvResetNextTaskUnblockTime+0x38>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <prvResetNextTaskUnblockTime+0x3c>)
 8005af6:	6013      	str	r3, [r2, #0]
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	200007a4 	.word	0x200007a4
 8005b08:	2000080c 	.word	0x2000080c

08005b0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b16:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b1c:	4b28      	ldr	r3, [pc, #160]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fae1 	bl	80050ea <uxListRemove>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b2e:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	2201      	movs	r2, #1
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4013      	ands	r3, r2
 8005b42:	4a20      	ldr	r2, [pc, #128]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d10a      	bne.n	8005b64 <prvAddCurrentTaskToDelayedList+0x58>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b54:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	481a      	ldr	r0, [pc, #104]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b5e:	f7ff fa67 	bl	8005030 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b62:	e026      	b.n	8005bb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4413      	add	r3, r2
 8005b6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b6c:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d209      	bcs.n	8005b90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b7c:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f7ff fa75 	bl	8005078 <vListInsert>
}
 8005b8e:	e010      	b.n	8005bb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b90:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f7ff fa6b 	bl	8005078 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d202      	bcs.n	8005bb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005bac:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6013      	str	r3, [r2, #0]
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	200007f0 	.word	0x200007f0
 8005bc0:	200006ec 	.word	0x200006ec
 8005bc4:	200007f4 	.word	0x200007f4
 8005bc8:	200007d8 	.word	0x200007d8
 8005bcc:	200007a8 	.word	0x200007a8
 8005bd0:	200007a4 	.word	0x200007a4
 8005bd4:	2000080c 	.word	0x2000080c

08005bd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3b04      	subs	r3, #4
 8005be8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f023 0201 	bic.w	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3b04      	subs	r3, #4
 8005c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c08:	4a0c      	ldr	r2, [pc, #48]	; (8005c3c <pxPortInitialiseStack+0x64>)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3b14      	subs	r3, #20
 8005c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3b04      	subs	r3, #4
 8005c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f06f 0202 	mvn.w	r2, #2
 8005c26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3b20      	subs	r3, #32
 8005c2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	08005c41 	.word	0x08005c41

08005c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <prvTaskExitError+0x54>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d00a      	beq.n	8005c6a <prvTaskExitError+0x2a>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60fb      	str	r3, [r7, #12]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <prvTaskExitError+0x28>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	60bb      	str	r3, [r7, #8]
}
 8005c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c7e:	bf00      	nop
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0fc      	beq.n	8005c80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	2000003c 	.word	0x2000003c
	...

08005ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <pxCurrentTCBConst2>)
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	6808      	ldr	r0, [r1, #0]
 8005ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	f380 8809 	msr	PSP, r0
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8811 	msr	BASEPRI, r0
 8005cba:	4770      	bx	lr
 8005cbc:	f3af 8000 	nop.w

08005cc0 <pxCurrentTCBConst2>:
 8005cc0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cc8:	4808      	ldr	r0, [pc, #32]	; (8005cec <prvPortStartFirstTask+0x24>)
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	f380 8808 	msr	MSP, r0
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8814 	msr	CONTROL, r0
 8005cda:	b662      	cpsie	i
 8005cdc:	b661      	cpsie	f
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	df00      	svc	0
 8005ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cea:	bf00      	nop
 8005cec:	e000ed08 	.word	0xe000ed08

08005cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cf6:	4b46      	ldr	r3, [pc, #280]	; (8005e10 <xPortStartScheduler+0x120>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a46      	ldr	r2, [pc, #280]	; (8005e14 <xPortStartScheduler+0x124>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10a      	bne.n	8005d16 <xPortStartScheduler+0x26>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	613b      	str	r3, [r7, #16]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d16:	4b3e      	ldr	r3, [pc, #248]	; (8005e10 <xPortStartScheduler+0x120>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3f      	ldr	r2, [pc, #252]	; (8005e18 <xPortStartScheduler+0x128>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10a      	bne.n	8005d36 <xPortStartScheduler+0x46>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	60fb      	str	r3, [r7, #12]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d36:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	22ff      	movs	r2, #255	; 0xff
 8005d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	4b31      	ldr	r3, [pc, #196]	; (8005e20 <xPortStartScheduler+0x130>)
 8005d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d5e:	4b31      	ldr	r3, [pc, #196]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d60:	2207      	movs	r2, #7
 8005d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d64:	e009      	b.n	8005d7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	4a2d      	ldr	r2, [pc, #180]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d82:	2b80      	cmp	r3, #128	; 0x80
 8005d84:	d0ef      	beq.n	8005d66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d86:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f1c3 0307 	rsb	r3, r3, #7
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d00a      	beq.n	8005da8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60bb      	str	r3, [r7, #8]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005da8:	4b1e      	ldr	r3, [pc, #120]	; (8005e24 <xPortStartScheduler+0x134>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <xPortStartScheduler+0x134>)
 8005db0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005db2:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <xPortStartScheduler+0x134>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dba:	4a1a      	ldr	r2, [pc, #104]	; (8005e24 <xPortStartScheduler+0x134>)
 8005dbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dc6:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a17      	ldr	r2, [pc, #92]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dd2:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dde:	f000 f8dd 	bl	8005f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <xPortStartScheduler+0x13c>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005de8:	f000 f8fc 	bl	8005fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <xPortStartScheduler+0x140>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0f      	ldr	r2, [pc, #60]	; (8005e30 <xPortStartScheduler+0x140>)
 8005df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005df6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005df8:	f7ff ff66 	bl	8005cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dfc:	f7ff fd4a 	bl	8005894 <vTaskSwitchContext>
	prvTaskExitError();
 8005e00:	f7ff ff1e 	bl	8005c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	e000ed00 	.word	0xe000ed00
 8005e14:	410fc271 	.word	0x410fc271
 8005e18:	410fc270 	.word	0x410fc270
 8005e1c:	e000e400 	.word	0xe000e400
 8005e20:	20000818 	.word	0x20000818
 8005e24:	2000081c 	.word	0x2000081c
 8005e28:	e000ed20 	.word	0xe000ed20
 8005e2c:	2000003c 	.word	0x2000003c
 8005e30:	e000ef34 	.word	0xe000ef34

08005e34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	607b      	str	r3, [r7, #4]
}
 8005e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e58:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d10f      	bne.n	8005e80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <vPortEnterCritical+0x5c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	603b      	str	r3, [r7, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <vPortEnterCritical+0x4a>
	}
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	2000003c 	.word	0x2000003c
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <vPortExitCritical+0x50>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <vPortExitCritical+0x24>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	607b      	str	r3, [r7, #4]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <vPortExitCritical+0x50>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <vPortExitCritical+0x50>)
 8005ec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ec2:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <vPortExitCritical+0x50>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <vPortExitCritical+0x42>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	2000003c 	.word	0x2000003c
	...

08005ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ef0:	f3ef 8009 	mrs	r0, PSP
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <pxCurrentTCBConst>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	f01e 0f10 	tst.w	lr, #16
 8005f00:	bf08      	it	eq
 8005f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0a:	6010      	str	r0, [r2, #0]
 8005f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f14:	f380 8811 	msr	BASEPRI, r0
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f7ff fcb8 	bl	8005894 <vTaskSwitchContext>
 8005f24:	f04f 0000 	mov.w	r0, #0
 8005f28:	f380 8811 	msr	BASEPRI, r0
 8005f2c:	bc09      	pop	{r0, r3}
 8005f2e:	6819      	ldr	r1, [r3, #0]
 8005f30:	6808      	ldr	r0, [r1, #0]
 8005f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f36:	f01e 0f10 	tst.w	lr, #16
 8005f3a:	bf08      	it	eq
 8005f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f40:	f380 8809 	msr	PSP, r0
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	f3af 8000 	nop.w

08005f50 <pxCurrentTCBConst>:
 8005f50:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop

08005f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	607b      	str	r3, [r7, #4]
}
 8005f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f72:	f7ff fbd7 	bl	8005724 <xTaskIncrementTick>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <SysTick_Handler+0x40>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	2300      	movs	r3, #0
 8005f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <vPortSetupTimerInterrupt+0x34>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <vPortSetupTimerInterrupt+0x38>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <vPortSetupTimerInterrupt+0x3c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <vPortSetupTimerInterrupt+0x40>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <vPortSetupTimerInterrupt+0x44>)
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fbe:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <vPortSetupTimerInterrupt+0x34>)
 8005fc0:	2207      	movs	r2, #7
 8005fc2:	601a      	str	r2, [r3, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	e000e010 	.word	0xe000e010
 8005fd4:	e000e018 	.word	0xe000e018
 8005fd8:	20000030 	.word	0x20000030
 8005fdc:	10624dd3 	.word	0x10624dd3
 8005fe0:	e000e014 	.word	0xe000e014

08005fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ff4 <vPortEnableVFP+0x10>
 8005fe8:	6801      	ldr	r1, [r0, #0]
 8005fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fee:	6001      	str	r1, [r0, #0]
 8005ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ff2:	bf00      	nop
 8005ff4:	e000ed88 	.word	0xe000ed88

08005ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006004:	f7ff fae4 	bl	80055d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006008:	4b5b      	ldr	r3, [pc, #364]	; (8006178 <pvPortMalloc+0x180>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006010:	f000 f920 	bl	8006254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006014:	4b59      	ldr	r3, [pc, #356]	; (800617c <pvPortMalloc+0x184>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 8093 	bne.w	8006148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01d      	beq.n	8006064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006028:	2208      	movs	r2, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4413      	add	r3, r2
 800602e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b00      	cmp	r3, #0
 8006038:	d014      	beq.n	8006064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f023 0307 	bic.w	r3, r3, #7
 8006040:	3308      	adds	r3, #8
 8006042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <pvPortMalloc+0x6c>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	617b      	str	r3, [r7, #20]
}
 8006060:	bf00      	nop
 8006062:	e7fe      	b.n	8006062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d06e      	beq.n	8006148 <pvPortMalloc+0x150>
 800606a:	4b45      	ldr	r3, [pc, #276]	; (8006180 <pvPortMalloc+0x188>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d869      	bhi.n	8006148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006074:	4b43      	ldr	r3, [pc, #268]	; (8006184 <pvPortMalloc+0x18c>)
 8006076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006078:	4b42      	ldr	r3, [pc, #264]	; (8006184 <pvPortMalloc+0x18c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800607e:	e004      	b.n	800608a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d903      	bls.n	800609c <pvPortMalloc+0xa4>
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f1      	bne.n	8006080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800609c:	4b36      	ldr	r3, [pc, #216]	; (8006178 <pvPortMalloc+0x180>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d050      	beq.n	8006148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2208      	movs	r2, #8
 80060ac:	4413      	add	r3, r2
 80060ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	2308      	movs	r3, #8
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d91f      	bls.n	8006108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <pvPortMalloc+0xf8>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	613b      	str	r3, [r7, #16]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	1ad2      	subs	r2, r2, r3
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006102:	69b8      	ldr	r0, [r7, #24]
 8006104:	f000 f908 	bl	8006318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <pvPortMalloc+0x188>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <pvPortMalloc+0x188>)
 8006114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006116:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <pvPortMalloc+0x188>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <pvPortMalloc+0x190>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d203      	bcs.n	800612a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006122:	4b17      	ldr	r3, [pc, #92]	; (8006180 <pvPortMalloc+0x188>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a18      	ldr	r2, [pc, #96]	; (8006188 <pvPortMalloc+0x190>)
 8006128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <pvPortMalloc+0x184>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	431a      	orrs	r2, r3
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800613e:	4b13      	ldr	r3, [pc, #76]	; (800618c <pvPortMalloc+0x194>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	4a11      	ldr	r2, [pc, #68]	; (800618c <pvPortMalloc+0x194>)
 8006146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006148:	f7ff fa50 	bl	80055ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <pvPortMalloc+0x174>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60fb      	str	r3, [r7, #12]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <pvPortMalloc+0x172>
	return pvReturn;
 800616c:	69fb      	ldr	r3, [r7, #28]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3728      	adds	r7, #40	; 0x28
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20004428 	.word	0x20004428
 800617c:	2000443c 	.word	0x2000443c
 8006180:	2000442c 	.word	0x2000442c
 8006184:	20004420 	.word	0x20004420
 8006188:	20004430 	.word	0x20004430
 800618c:	20004434 	.word	0x20004434

08006190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d04d      	beq.n	800623e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061a2:	2308      	movs	r3, #8
 80061a4:	425b      	negs	r3, r3
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	4b24      	ldr	r3, [pc, #144]	; (8006248 <vPortFree+0xb8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <vPortFree+0x44>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	60fb      	str	r3, [r7, #12]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <vPortFree+0x62>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	60bb      	str	r3, [r7, #8]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <vPortFree+0xb8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01e      	beq.n	800623e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11a      	bne.n	800623e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <vPortFree+0xb8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	43db      	mvns	r3, r3
 8006212:	401a      	ands	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006218:	f7ff f9da 	bl	80055d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <vPortFree+0xbc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4413      	add	r3, r2
 8006226:	4a09      	ldr	r2, [pc, #36]	; (800624c <vPortFree+0xbc>)
 8006228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800622a:	6938      	ldr	r0, [r7, #16]
 800622c:	f000 f874 	bl	8006318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <vPortFree+0xc0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	4a06      	ldr	r2, [pc, #24]	; (8006250 <vPortFree+0xc0>)
 8006238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800623a:	f7ff f9d7 	bl	80055ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	2000443c 	.word	0x2000443c
 800624c:	2000442c 	.word	0x2000442c
 8006250:	20004438 	.word	0x20004438

08006254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800625a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800625e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006260:	4b27      	ldr	r3, [pc, #156]	; (8006300 <prvHeapInit+0xac>)
 8006262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00c      	beq.n	8006288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3307      	adds	r3, #7
 8006272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0307 	bic.w	r3, r3, #7
 800627a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <prvHeapInit+0xac>)
 8006284:	4413      	add	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800628c:	4a1d      	ldr	r2, [pc, #116]	; (8006304 <prvHeapInit+0xb0>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006292:	4b1c      	ldr	r3, [pc, #112]	; (8006304 <prvHeapInit+0xb0>)
 8006294:	2200      	movs	r2, #0
 8006296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062a0:	2208      	movs	r2, #8
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a15      	ldr	r2, [pc, #84]	; (8006308 <prvHeapInit+0xb4>)
 80062b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062b6:	4b14      	ldr	r3, [pc, #80]	; (8006308 <prvHeapInit+0xb4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2200      	movs	r2, #0
 80062bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062be:	4b12      	ldr	r3, [pc, #72]	; (8006308 <prvHeapInit+0xb4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <prvHeapInit+0xb4>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4a0a      	ldr	r2, [pc, #40]	; (800630c <prvHeapInit+0xb8>)
 80062e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a09      	ldr	r2, [pc, #36]	; (8006310 <prvHeapInit+0xbc>)
 80062ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <prvHeapInit+0xc0>)
 80062ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062f2:	601a      	str	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	20000820 	.word	0x20000820
 8006304:	20004420 	.word	0x20004420
 8006308:	20004428 	.word	0x20004428
 800630c:	20004430 	.word	0x20004430
 8006310:	2000442c 	.word	0x2000442c
 8006314:	2000443c 	.word	0x2000443c

08006318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006320:	4b28      	ldr	r3, [pc, #160]	; (80063c4 <prvInsertBlockIntoFreeList+0xac>)
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e002      	b.n	800632c <prvInsertBlockIntoFreeList+0x14>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d8f7      	bhi.n	8006326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4413      	add	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d108      	bne.n	800635a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	441a      	add	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d118      	bne.n	80063a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b15      	ldr	r3, [pc, #84]	; (80063c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d00d      	beq.n	8006396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e008      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e003      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d002      	beq.n	80063b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20004420 	.word	0x20004420
 80063c8:	20004428 	.word	0x20004428

080063cc <memset>:
 80063cc:	4402      	add	r2, r0
 80063ce:	4603      	mov	r3, r0
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d100      	bne.n	80063d6 <memset+0xa>
 80063d4:	4770      	bx	lr
 80063d6:	f803 1b01 	strb.w	r1, [r3], #1
 80063da:	e7f9      	b.n	80063d0 <memset+0x4>

080063dc <_reclaim_reent>:
 80063dc:	4b29      	ldr	r3, [pc, #164]	; (8006484 <_reclaim_reent+0xa8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4283      	cmp	r3, r0
 80063e2:	b570      	push	{r4, r5, r6, lr}
 80063e4:	4604      	mov	r4, r0
 80063e6:	d04b      	beq.n	8006480 <_reclaim_reent+0xa4>
 80063e8:	69c3      	ldr	r3, [r0, #28]
 80063ea:	b143      	cbz	r3, 80063fe <_reclaim_reent+0x22>
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d144      	bne.n	800647c <_reclaim_reent+0xa0>
 80063f2:	69e3      	ldr	r3, [r4, #28]
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	b111      	cbz	r1, 80063fe <_reclaim_reent+0x22>
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 f86b 	bl	80064d4 <_free_r>
 80063fe:	6961      	ldr	r1, [r4, #20]
 8006400:	b111      	cbz	r1, 8006408 <_reclaim_reent+0x2c>
 8006402:	4620      	mov	r0, r4
 8006404:	f000 f866 	bl	80064d4 <_free_r>
 8006408:	69e1      	ldr	r1, [r4, #28]
 800640a:	b111      	cbz	r1, 8006412 <_reclaim_reent+0x36>
 800640c:	4620      	mov	r0, r4
 800640e:	f000 f861 	bl	80064d4 <_free_r>
 8006412:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006414:	b111      	cbz	r1, 800641c <_reclaim_reent+0x40>
 8006416:	4620      	mov	r0, r4
 8006418:	f000 f85c 	bl	80064d4 <_free_r>
 800641c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800641e:	b111      	cbz	r1, 8006426 <_reclaim_reent+0x4a>
 8006420:	4620      	mov	r0, r4
 8006422:	f000 f857 	bl	80064d4 <_free_r>
 8006426:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006428:	b111      	cbz	r1, 8006430 <_reclaim_reent+0x54>
 800642a:	4620      	mov	r0, r4
 800642c:	f000 f852 	bl	80064d4 <_free_r>
 8006430:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006432:	b111      	cbz	r1, 800643a <_reclaim_reent+0x5e>
 8006434:	4620      	mov	r0, r4
 8006436:	f000 f84d 	bl	80064d4 <_free_r>
 800643a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800643c:	b111      	cbz	r1, 8006444 <_reclaim_reent+0x68>
 800643e:	4620      	mov	r0, r4
 8006440:	f000 f848 	bl	80064d4 <_free_r>
 8006444:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006446:	b111      	cbz	r1, 800644e <_reclaim_reent+0x72>
 8006448:	4620      	mov	r0, r4
 800644a:	f000 f843 	bl	80064d4 <_free_r>
 800644e:	6a23      	ldr	r3, [r4, #32]
 8006450:	b1b3      	cbz	r3, 8006480 <_reclaim_reent+0xa4>
 8006452:	4620      	mov	r0, r4
 8006454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006458:	4718      	bx	r3
 800645a:	5949      	ldr	r1, [r1, r5]
 800645c:	b941      	cbnz	r1, 8006470 <_reclaim_reent+0x94>
 800645e:	3504      	adds	r5, #4
 8006460:	69e3      	ldr	r3, [r4, #28]
 8006462:	2d80      	cmp	r5, #128	; 0x80
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	d1f8      	bne.n	800645a <_reclaim_reent+0x7e>
 8006468:	4620      	mov	r0, r4
 800646a:	f000 f833 	bl	80064d4 <_free_r>
 800646e:	e7c0      	b.n	80063f2 <_reclaim_reent+0x16>
 8006470:	680e      	ldr	r6, [r1, #0]
 8006472:	4620      	mov	r0, r4
 8006474:	f000 f82e 	bl	80064d4 <_free_r>
 8006478:	4631      	mov	r1, r6
 800647a:	e7ef      	b.n	800645c <_reclaim_reent+0x80>
 800647c:	2500      	movs	r5, #0
 800647e:	e7ef      	b.n	8006460 <_reclaim_reent+0x84>
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	bf00      	nop
 8006484:	2000008c 	.word	0x2000008c

08006488 <__libc_init_array>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4d0d      	ldr	r5, [pc, #52]	; (80064c0 <__libc_init_array+0x38>)
 800648c:	4c0d      	ldr	r4, [pc, #52]	; (80064c4 <__libc_init_array+0x3c>)
 800648e:	1b64      	subs	r4, r4, r5
 8006490:	10a4      	asrs	r4, r4, #2
 8006492:	2600      	movs	r6, #0
 8006494:	42a6      	cmp	r6, r4
 8006496:	d109      	bne.n	80064ac <__libc_init_array+0x24>
 8006498:	4d0b      	ldr	r5, [pc, #44]	; (80064c8 <__libc_init_array+0x40>)
 800649a:	4c0c      	ldr	r4, [pc, #48]	; (80064cc <__libc_init_array+0x44>)
 800649c:	f000 f872 	bl	8006584 <_init>
 80064a0:	1b64      	subs	r4, r4, r5
 80064a2:	10a4      	asrs	r4, r4, #2
 80064a4:	2600      	movs	r6, #0
 80064a6:	42a6      	cmp	r6, r4
 80064a8:	d105      	bne.n	80064b6 <__libc_init_array+0x2e>
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b0:	4798      	blx	r3
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7ee      	b.n	8006494 <__libc_init_array+0xc>
 80064b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ba:	4798      	blx	r3
 80064bc:	3601      	adds	r6, #1
 80064be:	e7f2      	b.n	80064a6 <__libc_init_array+0x1e>
 80064c0:	08006670 	.word	0x08006670
 80064c4:	08006670 	.word	0x08006670
 80064c8:	08006670 	.word	0x08006670
 80064cc:	08006674 	.word	0x08006674

080064d0 <__retarget_lock_acquire_recursive>:
 80064d0:	4770      	bx	lr

080064d2 <__retarget_lock_release_recursive>:
 80064d2:	4770      	bx	lr

080064d4 <_free_r>:
 80064d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064d6:	2900      	cmp	r1, #0
 80064d8:	d044      	beq.n	8006564 <_free_r+0x90>
 80064da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064de:	9001      	str	r0, [sp, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f1a1 0404 	sub.w	r4, r1, #4
 80064e6:	bfb8      	it	lt
 80064e8:	18e4      	addlt	r4, r4, r3
 80064ea:	f000 f83f 	bl	800656c <__malloc_lock>
 80064ee:	4a1e      	ldr	r2, [pc, #120]	; (8006568 <_free_r+0x94>)
 80064f0:	9801      	ldr	r0, [sp, #4]
 80064f2:	6813      	ldr	r3, [r2, #0]
 80064f4:	b933      	cbnz	r3, 8006504 <_free_r+0x30>
 80064f6:	6063      	str	r3, [r4, #4]
 80064f8:	6014      	str	r4, [r2, #0]
 80064fa:	b003      	add	sp, #12
 80064fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006500:	f000 b83a 	b.w	8006578 <__malloc_unlock>
 8006504:	42a3      	cmp	r3, r4
 8006506:	d908      	bls.n	800651a <_free_r+0x46>
 8006508:	6825      	ldr	r5, [r4, #0]
 800650a:	1961      	adds	r1, r4, r5
 800650c:	428b      	cmp	r3, r1
 800650e:	bf01      	itttt	eq
 8006510:	6819      	ldreq	r1, [r3, #0]
 8006512:	685b      	ldreq	r3, [r3, #4]
 8006514:	1949      	addeq	r1, r1, r5
 8006516:	6021      	streq	r1, [r4, #0]
 8006518:	e7ed      	b.n	80064f6 <_free_r+0x22>
 800651a:	461a      	mov	r2, r3
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	b10b      	cbz	r3, 8006524 <_free_r+0x50>
 8006520:	42a3      	cmp	r3, r4
 8006522:	d9fa      	bls.n	800651a <_free_r+0x46>
 8006524:	6811      	ldr	r1, [r2, #0]
 8006526:	1855      	adds	r5, r2, r1
 8006528:	42a5      	cmp	r5, r4
 800652a:	d10b      	bne.n	8006544 <_free_r+0x70>
 800652c:	6824      	ldr	r4, [r4, #0]
 800652e:	4421      	add	r1, r4
 8006530:	1854      	adds	r4, r2, r1
 8006532:	42a3      	cmp	r3, r4
 8006534:	6011      	str	r1, [r2, #0]
 8006536:	d1e0      	bne.n	80064fa <_free_r+0x26>
 8006538:	681c      	ldr	r4, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	6053      	str	r3, [r2, #4]
 800653e:	440c      	add	r4, r1
 8006540:	6014      	str	r4, [r2, #0]
 8006542:	e7da      	b.n	80064fa <_free_r+0x26>
 8006544:	d902      	bls.n	800654c <_free_r+0x78>
 8006546:	230c      	movs	r3, #12
 8006548:	6003      	str	r3, [r0, #0]
 800654a:	e7d6      	b.n	80064fa <_free_r+0x26>
 800654c:	6825      	ldr	r5, [r4, #0]
 800654e:	1961      	adds	r1, r4, r5
 8006550:	428b      	cmp	r3, r1
 8006552:	bf04      	itt	eq
 8006554:	6819      	ldreq	r1, [r3, #0]
 8006556:	685b      	ldreq	r3, [r3, #4]
 8006558:	6063      	str	r3, [r4, #4]
 800655a:	bf04      	itt	eq
 800655c:	1949      	addeq	r1, r1, r5
 800655e:	6021      	streq	r1, [r4, #0]
 8006560:	6054      	str	r4, [r2, #4]
 8006562:	e7ca      	b.n	80064fa <_free_r+0x26>
 8006564:	b003      	add	sp, #12
 8006566:	bd30      	pop	{r4, r5, pc}
 8006568:	2000457c 	.word	0x2000457c

0800656c <__malloc_lock>:
 800656c:	4801      	ldr	r0, [pc, #4]	; (8006574 <__malloc_lock+0x8>)
 800656e:	f7ff bfaf 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 8006572:	bf00      	nop
 8006574:	20004578 	.word	0x20004578

08006578 <__malloc_unlock>:
 8006578:	4801      	ldr	r0, [pc, #4]	; (8006580 <__malloc_unlock+0x8>)
 800657a:	f7ff bfaa 	b.w	80064d2 <__retarget_lock_release_recursive>
 800657e:	bf00      	nop
 8006580:	20004578 	.word	0x20004578

08006584 <_init>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr

08006590 <_fini>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	bf00      	nop
 8006594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006596:	bc08      	pop	{r3}
 8006598:	469e      	mov	lr, r3
 800659a:	4770      	bx	lr
